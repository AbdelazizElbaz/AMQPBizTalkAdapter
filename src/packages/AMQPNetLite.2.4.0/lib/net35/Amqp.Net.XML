<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Amqp.Net</name>
    </assembly>
    <members>
        <member name="T:Amqp.Address">
            <summary>
            Defines the address of an AMQP endpoint.
            </summary>
            <remarks>
            An address has the following form:<para/>
              amqp[s] :// [user:[password]@] domain[:port] [/[path]<para/>
            Where domain can be:<para/>
              host | ip | name<para/>
            If "amqps" is specified, the connection uses TLS in the underlying transport.
            When port is not specified, it is set to the standard based on scheme (amqp: 5672, amqps: 5671)
            path is not used by the library.
            Note that TLS Server Name Indication (SNI) is signaled only for "amqps" addresses where
            the domain is host | name. SNI is not signaled when the domain is a numeric IP address.
            </remarks>
        </member>
        <member name="M:Amqp.Address.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Address class from a string.
            </summary>
            <param name="address">The string representation of the address.</param>
        </member>
        <member name="M:Amqp.Address.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Address class from individual components.
            </summary>
            <param name="host">The domain of the address.</param>
            <param name="port">The port number of the address.</param>
            <param name="user">User name for SASL PLAIN profile.</param>
            <param name="password">Password for SASL PLAIN profile.</param>
            <param name="path">The path of the address.</param>
            <param name="scheme">Protocol scheme, which can be either "amqp" or "amqps".</param>
        </member>
        <member name="P:Amqp.Address.Scheme">
            <summary>
            Gets the protocol scheme.
            </summary>
        </member>
        <member name="P:Amqp.Address.UseSsl">
            <summary>
            Gets a value indicating where TLS is enabled.
            </summary>
        </member>
        <member name="P:Amqp.Address.Host">
            <summary>
            Gets the host of the address.
            </summary>
        </member>
        <member name="P:Amqp.Address.Port">
            <summary>
            Gets the port number of the address.
            </summary>
        </member>
        <member name="P:Amqp.Address.User">
            <summary>
            Gets the user name that is used for SASL PLAIN profile.
            </summary>
        </member>
        <member name="P:Amqp.Address.Password">
            <summary>
            Gets the password that is used for SASL PLAIN profile.
            </summary>
        </member>
        <member name="P:Amqp.Address.Path">
            <summary>
            Gets the path of the address.
            </summary>
        </member>
        <member name="T:Amqp.AmqpBitConverter">
            <summary>
            Reads primitive values from a buffer or writes primitive values to a buffer in networking order.
            </summary>
        </member>
        <member name="F:Amqp.AmqpBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data is stored in this computer architecture.
            </summary>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadByte(Amqp.ByteBuffer)">
            <summary>
            Reads a signed byte and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadUByte(Amqp.ByteBuffer)">
            <summary>
            Reads an unsigned byte and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadShort(Amqp.ByteBuffer)">
            <summary>
            Reads a 16-bit signed integer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadUShort(Amqp.ByteBuffer)">
            <summary>
            Reads a 16-bit unsigned integer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadInt(Amqp.ByteBuffer)">
            <summary>
            Reads a 32-bit signed integer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadInt(System.Byte[],System.Int32)">
            <summary>
            Reads a 32-bit signed integer from the buffer at the specified offset.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="offset">The offset in the buffer to start reading.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadUInt(Amqp.ByteBuffer)">
            <summary>
            Reads a 32-bit unsigned integer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadLong(Amqp.ByteBuffer)">
            <summary>
            Reads a 64-bit signed integer from the buffer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadULong(Amqp.ByteBuffer)">
            <summary>
            Reads a 64-bit unsigned integer from the buffer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadFloat(Amqp.ByteBuffer)">
            <summary>
            Reads a 32-bit floating-point value from the buffer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadDouble(Amqp.ByteBuffer)">
            <summary>
            Reads a 64-bit floating-point value from the buffer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadUuid(Amqp.ByteBuffer)">
            <summary>
            Reads a uuid (16-bytes) from the buffer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.AmqpBitConverter.ReadBytes(Amqp.ByteBuffer,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from one buffer into another.
            </summary>
            <param name="buffer">Source buffer.</param>
            <param name="data">Destination buffer</param>
            <param name="offset">The start position to write.</param>
            <param name="count">The number of bytes to read.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteByte(Amqp.ByteBuffer,System.SByte)">
            <summary>
            Writes a signed byte into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteUByte(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Writes an unsigned byte into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteShort(Amqp.ByteBuffer,System.Int16)">
            <summary>
            Writes a 16-bit signed integer into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteUShort(Amqp.ByteBuffer,System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteInt(Amqp.ByteBuffer,System.Int32)">
            <summary>
            Writes a 32-bit signed integer into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a 32-bit unsigned integer into the buffer at specified offset.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the buffer.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteUInt(Amqp.ByteBuffer,System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteLong(Amqp.ByteBuffer,System.Int64)">
            <summary>
            Writes a 64-bit signed integer into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteULong(Amqp.ByteBuffer,System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteFloat(Amqp.ByteBuffer,System.Single)">
            <summary>
            Writes a 32-bit floating-point value into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteDouble(Amqp.ByteBuffer,System.Double)">
            <summary>
            Writes a 64-bit floating-point value into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteUuid(Amqp.ByteBuffer,System.Guid)">
            <summary>
            Writes a uuid (16-bytes) into the buffer and advance the buffer write cursor.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="data">The data to write.</param>
        </member>
        <member name="M:Amqp.AmqpBitConverter.WriteBytes(Amqp.ByteBuffer,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from one buffer into another.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <param name="data">The source buffer</param>
            <param name="offset">The position in source buffer to start.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="T:Amqp.AmqpException">
            <summary>
            The exception that is thrown when an AMQP error occurs.
            </summary>
        </member>
        <member name="M:Amqp.AmqpException.#ctor(Amqp.Framing.Error)">
            <summary>
            Initializes a new instance of the AmqpException class with the AMQP error.
            </summary>
            <param name="error">The AMQP <see cref="P:Amqp.AmqpException.Error"/> object.</param>
        </member>
        <member name="M:Amqp.AmqpException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AmqpException class with the AMQP error.
            </summary>
            <param name="condition">The error condition.</param>
            <param name="description">The error description.</param>
        </member>
        <member name="P:Amqp.AmqpException.Error">
            <summary>
            Gets the AMQP <see cref="P:Amqp.AmqpException.Error"/> stored in this exception.
            </summary>
        </member>
        <member name="T:Amqp.AmqpObject">
            <summary>
            The base class of all AMQP objects.
            <seealso cref="T:Amqp.Connection"/>
            <seealso cref="T:Amqp.Session"/>
            <seealso cref="T:Amqp.SenderLink"/>
            <seealso cref="T:Amqp.ReceiverLink"/>
            </summary>
        </member>
        <member name="E:Amqp.AmqpObject.Closed">
            <summary>
            Gets the event used to notify that the object is closed. Callbacks
            may not be invoked if they are registered after the object is closed.
            It is recommend to call AddClosedCallback method.
            </summary>
        </member>
        <member name="P:Amqp.AmqpObject.Error">
            <summary>
            Gets the last <see cref="P:Amqp.AmqpObject.Error"/>, if any, of the object.
            </summary>
        </member>
        <member name="P:Amqp.AmqpObject.IsClosed">
            <summary>
            Gets a boolean value indicating if the object has been closed.
            </summary>
        </member>
        <member name="M:Amqp.AmqpObject.AddClosedCallback(Amqp.ClosedCallback)">
            <summary>
            Adds a callback to be called when the object is called.
            This method guarantees that the callback is invoked even if
            it is registered after the object is closed.
            </summary>
            <param name="callback">The callback to be invoked.</param>
        </member>
        <member name="M:Amqp.AmqpObject.Close">
            <summary>
            Closes the AMQP object. It waits until a response is received from the peer,
            or throws TimeoutException after a default timeout.
            </summary>
        </member>
        <member name="M:Amqp.AmqpObject.Close(System.TimeSpan,Amqp.Framing.Error)">
            <summary>
            Closes the AMQP object with the specified error.
            </summary>
            <param name="timeout">The duration to block until a closing frame is
            received from the peer. If it is TimeSpan.Zero, the call is non-blocking.</param>
            <param name="error">The AMQP <see cref="P:Amqp.AmqpObject.Error"/> to send to the peer,
            indicating why the object is being closed.</param>
        </member>
        <member name="M:Amqp.AmqpObject.OnClose(Amqp.Framing.Error)">
            <summary>
            When overridden in a derived class, performs the actual close operation required by the object.
            </summary>
            <param name="error">The <see cref="P:Amqp.AmqpObject.Error"/> for closing the object.</param>
            <returns>A boolean value indicating if the object has been fully closed.</returns>
        </member>
        <member name="T:Amqp.ByteBuffer">
            <summary>
            A byte array wrapper that has a read and a write cursor.
            </summary>
        </member>
        <member name="M:Amqp.ByteBuffer.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new buffer from a byte array.
            </summary>
            <param name="buffer">The byte array.</param>
            <param name="offset">The start position.</param>
            <param name="count">The number of bytes.</param>
            <param name="capacity">The total size of the byte array from offset.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new buffer of a specified size.
            </summary>
            <param name="size">The size in bytes.</param>
            <param name="autoGrow">If the buffer should auto-grow when a write size is larger than the buffer size.</param>
        </member>
        <member name="P:Amqp.ByteBuffer.Buffer">
            <summary>
            Gets the byte array.
            </summary>
        </member>
        <member name="P:Amqp.ByteBuffer.Capacity">
            <summary>
            Gets the capacity.
            </summary>
        </member>
        <member name="P:Amqp.ByteBuffer.Offset">
            <summary>
            Gets the current offset (read position).
            </summary>
        </member>
        <member name="P:Amqp.ByteBuffer.Size">
            <summary>
            Gets the remaining size for write.
            </summary>
        </member>
        <member name="P:Amqp.ByteBuffer.Length">
            <summary>
            Gets the available size for read.
            </summary>
        </member>
        <member name="P:Amqp.ByteBuffer.WritePos">
            <summary>
            Gets the write position.
            </summary>
        </member>
        <member name="M:Amqp.ByteBuffer.Validate(System.Boolean,System.Int32)">
            <summary>
            Verifies that the buffer has enough bytes for read or enough room for write and grow the buffer if needed.
            </summary>
            <param name="write">Operation to verify. True for write and false for read.</param>
            <param name="dataSize">The size to read or write.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.ValidateRead(System.Int32)">
            <summary>
            Verifies that the buffer has enough bytes for read.
            </summary>
            <param name="dataSize">The size to read.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.ValidateWrite(System.Int32)">
            <summary>
            Verifies that the buffer has enough room for write and grow the buffer if needed.
            </summary>
            <param name="dataSize">The size to write.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.Append(System.Int32)">
            <summary>
            Advances the write position. As a result, length is increased by size.
            </summary>
            <param name="size">Size to advance.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.Complete(System.Int32)">
            <summary>
            Advances the read position.
            </summary>
            <param name="size">Size to advance.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.Seek(System.Int32)">
            <summary>
            Sets the read position.
            </summary>
            <param name="seekPosition">Position to set.</param>
        </member>
        <member name="M:Amqp.ByteBuffer.Shrink(System.Int32)">
            <summary>
            Moves back the write position. As a result, length is decreased by size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Amqp.ByteBuffer.Reset">
            <summary>
            Resets read and write position to the initial state.
            </summary>
        </member>
        <member name="M:Amqp.ByteBuffer.AdjustPosition(System.Int32,System.Int32)">
            <summary>
            Adjusts the read and write position.
            </summary>
            <param name="offset">Read position to set.</param>
            <param name="length">Length from read position to set the write position.</param>
        </member>
        <member name="T:Amqp.ConnectionState">
            <summary>
            The state of a connection.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.Start">
            <summary>
            The connection is started.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.HeaderSent">
            <summary>
            Header frame was sent. 
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.OpenPipe">
            <summary>
            The connection is opening.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.HeaderReceived">
            <summary>
            Header frame was received.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.HeaderExchanged">
            <summary>
            Header frame exchanged.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.OpenSent">
            <summary>
            Open frame was sent.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.OpenReceived">
            <summary>
            Open frame was received.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.Opened">
            <summary>
            The connection is opened.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.CloseReceived">
            <summary>
            Close frame received.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.CloseSent">
            <summary>
            Close frame sent.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.OpenClosePipe">
            <summary>
            The connection is opening or closing. 
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.ClosePipe">
            <summary>
            The connection is closing.
            </summary>
        </member>
        <member name="F:Amqp.ConnectionState.End">
            <summary>
            The connection is closed.
            </summary>
        </member>
        <member name="T:Amqp.Connection">
            <summary>
            The Connection class represents an AMQP connection.
            </summary>
        </member>
        <member name="F:Amqp.Connection.DisableServerCertValidation">
            <summary>
            A flag to disable server certificate validation when TLS is used.
            </summary>
        </member>
        <member name="M:Amqp.Connection.#ctor(Amqp.Address)">
            <summary>
            Initializes a connection from the address.
            </summary>
            <param name="address">The address.</param>
            <remarks>
            The connection initialization includes establishing the underlying transport,
            which typically has blocking network I/O. Depending on the current synchronization
            context, it may cause deadlock or UI freeze. Please use the ConnectionFactory.CreateAsync
            method instead.
            </remarks>
        </member>
        <member name="M:Amqp.Connection.#ctor(Amqp.Address,Amqp.Handler.IHandler)">
            <summary>
            Initializes a connection from the address.
            </summary>
            <param name="address">The address.</param>
            <param name="handler">The protocol handler.</param>
        </member>
        <member name="M:Amqp.Connection.#ctor(Amqp.Address,Amqp.Sasl.SaslProfile,Amqp.Framing.Open,Amqp.OnOpened)">
            <summary>
            Initializes a connection with SASL profile, open and open callback.
            </summary>
            <param name="address">The address.</param>
            <param name="saslProfile">The SASL profile to do authentication (optional). If it is
            null and address has user info, SASL PLAIN profile is used.</param>
            <param name="open">The open frame to send (optional). If not null, all mandatory
            fields must be set. Ensure that other fields are set to desired values.</param>
            <param name="onOpened">The callback to handle remote open frame (optional).</param>
            <remarks>
            The connection initialization includes establishing the underlying transport,
            which typically has blocking network I/O. Depending on the current synchronization
            context, it may cause deadlock or UI freeze. Please use the ConnectionFactory.CreateAsync
            method instead.
            </remarks>
        </member>
        <member name="P:Amqp.Connection.Handler">
            <summary>
            Gets the protocol handler on the connection if it is set.
            </summary>
        </member>
        <member name="M:Amqp.Connection.OnClose(Amqp.Framing.Error)">
            <summary>
            Closes the connection.
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:Amqp.CreditMode">
            <summary>
            Defines the modes for receiver link credit management.
            </summary>
        </member>
        <member name="F:Amqp.CreditMode.Manual">
            <summary>
            Link credit is manually restored.
            </summary>
        </member>
        <member name="F:Amqp.CreditMode.Auto">
            <summary>
            Link credit is managed by the <see cref="T:Amqp.ReceiverLink"/> based on initial credit
            and message operations.
            </summary>
        </member>
        <member name="F:Amqp.CreditMode.Drain">
            <summary>
            Link credit is drained.
            </summary>
        </member>
        <member name="T:Amqp.Handler.EventId">
            <summary>
            Identifies a protocol event.
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.ConnectionLocalOpen">
            <summary>
            An <see cref="T:Amqp.Framing.Open"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.ConnectionRemoteOpen">
            <summary>
            An <see cref="T:Amqp.Framing.Open"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is received. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.ConnectionLocalClose">
            <summary>
            A <see cref="T:Amqp.Framing.Close"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.ConnectionRemoteClose">
            <summary>
            A <see cref="T:Amqp.Framing.Close"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is received. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.SessionLocalOpen">
            <summary>
            A <see cref="T:Amqp.Framing.Begin"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.SessionRemoteOpen">
            <summary>
            A <see cref="T:Amqp.Framing.Begin"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is received. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.SessionLocalClose">
            <summary>
            An <see cref="T:Amqp.Framing.End"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.SessionRemoteClose">
            <summary>
            An <see cref="T:Amqp.Framing.End"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is received.
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.LinkLocalOpen">
            <summary>
            An <see cref="T:Amqp.Framing.Attach"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.LinkRemoteOpen">
            <summary>
            An <see cref="T:Amqp.Framing.Attach"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is received.
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.LinkLocalClose">
            <summary>
            A <see cref="T:Amqp.Framing.Detach"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send. 
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.LinkRemoteClose">
            <summary>
            A <see cref="T:Amqp.Framing.Detach"/> performative (<see cref="P:Amqp.Handler.Event.Context"/>) is received.
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.SendDelivery">
            <summary>
            A <see cref="T:Amqp.Handler.IDelivery"/> (<see cref="P:Amqp.Handler.Event.Context"/>) is about to send.
            </summary>
        </member>
        <member name="F:Amqp.Handler.EventId.ReceiveDelivery">
            <summary>
            A <see cref="T:Amqp.Handler.IDelivery"/> (<see cref="P:Amqp.Handler.Event.Context"/>) is received.
            </summary>
        </member>
        <member name="T:Amqp.Handler.Event">
            <summary>
            Represents a protocol event.
            </summary>
        </member>
        <member name="P:Amqp.Handler.Event.Id">
            <summary>
            Gets the event identifier.
            </summary>
        </member>
        <member name="P:Amqp.Handler.Event.Connection">
            <summary>
            Gets the connection where the event occurs.
            </summary>
        </member>
        <member name="P:Amqp.Handler.Event.Session">
            <summary>
            Gets the session, if available, where the event occurs.
            </summary>
        </member>
        <member name="P:Amqp.Handler.Event.Link">
            <summary>
            Gets the link, if available, where the event occurs.
            </summary>
        </member>
        <member name="P:Amqp.Handler.Event.Context">
            <summary>
            Gets the context associated with the event as defined in each <see cref="T:Amqp.Handler.EventId"/>.
            </summary>
        </member>
        <member name="T:Amqp.Handler.IHandler">
            <summary>
            A handler to receive protocol events.
            </summary>
        </member>
        <member name="M:Amqp.Handler.IHandler.CanHandle(Amqp.Handler.EventId)">
            <summary>
            Checks if the handler can handle a given event.
            </summary>
            <param name="id">The <see cref="T:Amqp.Handler.EventId"/>.</param>
            <returns>true if the event can be handled; false otherwise.</returns>
        </member>
        <member name="M:Amqp.Handler.IHandler.Handle(Amqp.Handler.Event)">
            <summary>
            Handles a protocol event.
            </summary>
            <param name="protocolEvent">The procotol event.</param>
        </member>
        <member name="T:Amqp.Handler.IDelivery">
            <summary>
            A delivery contains the state for transfering a message.
            The properties must not be changed on a received delivery.
            between nodes.
            </summary>
        </member>
        <member name="P:Amqp.Handler.IDelivery.Tag">
            <summary>
            Gets or sets the delivery tag.
            </summary>
        </member>
        <member name="P:Amqp.Handler.IDelivery.State">
            <summary>
            Gets or sets the delivery state.
            </summary>
        </member>
        <member name="P:Amqp.Handler.IDelivery.Batchable">
            <summary>
            Gets or sets the batchable field.
            </summary>
        </member>
        <member name="P:Amqp.Handler.IDelivery.UserToken">
            <summary>
            Gets the user state object if set in the send method.
            </summary>
        </member>
        <member name="P:Amqp.Handler.IDelivery.Settled">
            <summary>
            Gets or sets the Settled field.
            </summary>
        </member>
        <member name="T:Amqp.OnOpened">
            <summary>
            The callback that is invoked when an open performative is received from peer.
            </summary>
            <param name="connection">The connection that is being opened.</param>
            <param name="open">The open performative received from the remote peer.</param>
        </member>
        <member name="T:Amqp.OnBegin">
            <summary>
            The callback that is invoked when a begin performative is received from peer.
            </summary>
            <param name="session">The session that is being opened.</param>
            <param name="begin">The begin performative performative from the remote peer.</param>
        </member>
        <member name="T:Amqp.OnAttached">
            <summary>
            The callback that is invoked when an attach performative is received from the peer.
            </summary>
            <param name="link">The link object that is being opened.</param>
            <param name="attach">The attach performative received from the remote peer.</param>
        </member>
        <member name="T:Amqp.ClosedCallback">
            <summary>
            The callback that is invoked when the AMQP object is closed.
            </summary>
            <param name="sender">The AMQP object that is closed.</param>
            <param name="error">The AMQP <see cref="T:Amqp.Framing.Error"/>, if any, that caused the object closure.</param>
        </member>
        <member name="T:Amqp.OutcomeCallback">
            <summary>
            A callback that is invoked when an outcome is received from peer for a message.
            </summary>
            <param name="sender">The link where the message is transferred.</param>
            <param name="message">The message to which the outcome applies.</param>
            <param name="outcome">The received outcome from the remote peer.</param>
            <param name="state">The user object specified in the Send method.</param>
        </member>
        <member name="T:Amqp.MessageCallback">
            <summary>
            A callback that is invoked when a message is received.
            </summary>
            <param name="receiver">The receiver link from which a message is received.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="T:Amqp.IAmqpObject">
            <summary>
            Represents an AMQP object.
            </summary>
        </member>
        <member name="E:Amqp.IAmqpObject.Closed">
            <summary>
            Gets the event used to notify that the object is closed. Callbacks
            may not be invoked if they are registered after the object is closed.
            It is recommend to call AddClosedCallback method.
            </summary>
        </member>
        <member name="P:Amqp.IAmqpObject.Error">
            <summary>
            Gets the last <see cref="P:Amqp.IAmqpObject.Error"/>, if any, of the object.
            </summary>
        </member>
        <member name="P:Amqp.IAmqpObject.IsClosed">
            <summary>
            Gets a boolean value indicating if the object has been closed.
            </summary>
        </member>
        <member name="M:Amqp.IAmqpObject.AddClosedCallback(Amqp.ClosedCallback)">
            <summary>
            Adds a callback to be called when the object is closed.
            This method guarantees that the callback is invoked even if
            it is called after the object is closed.
            </summary>
            <param name="callback">The callback to be invoked.</param>
        </member>
        <member name="M:Amqp.IAmqpObject.Close">
            <summary>
            Closes the AMQP object. It waits until a response is received from the peer,
            or throws TimeoutException after a default timeout.
            </summary>
        </member>
        <member name="M:Amqp.IAmqpObject.Close(System.TimeSpan,Amqp.Framing.Error)">
            <summary>
            Closes the AMQP object with the specified error.
            </summary>
            <param name="waitUntilEnded">The duration to block until a closing frame is
            received from the peer. If it is TimeSpan.Zero, the call is non-blocking.</param>
            <param name="error">The AMQP <see cref="P:Amqp.IAmqpObject.Error"/> to send to the peer,
            indicating why the object is being closed.</param>
        </member>
        <member name="T:Amqp.IConnection">
            <summary>
            Represents an AMQP connection.
            </summary>
        </member>
        <member name="M:Amqp.IConnection.CreateSession">
            <summary>
            Creates a session in the connection.
            </summary>
            <returns>An ISession object.</returns>
        </member>
        <member name="T:Amqp.ISession">
            <summary>
            Represents an AMQP session.
            </summary>
        </member>
        <member name="M:Amqp.ISession.CreateSender(System.String,System.String)">
            <summary>
            Creates a sender link in the session.
            </summary>
            <param name="name">The link name.</param>
            <param name="address">The target address where to send messages.</param>
            <returns>An ISenderLink object.</returns>
        </member>
        <member name="M:Amqp.ISession.CreateReceiver(System.String,System.String)">
            <summary>
            Creates a receiver link in the session.
            </summary>
            <param name="name">The link name.</param>
            <param name="address">The source address where to receive messages.</param>
            <returns>An IReceiverLink object.</returns>
        </member>
        <member name="M:Amqp.ISession.CreateSender(System.String,Amqp.Framing.Target,Amqp.OnAttached)">
            <summary>
            Creates a sender link in the session.
            </summary>
            <param name="name">The link name.</param>
            <param name="target">The target where to send messages.</param>
            <param name="onAttached">The callback that is invoked when an attach performative is received from the peer.</param>
            <returns>An ISenderLink object.</returns>
        </member>
        <member name="M:Amqp.ISession.CreateReceiver(System.String,Amqp.Framing.Source,Amqp.OnAttached)">
            <summary>
            Creates a receiver link in the session.
            </summary>
            <param name="name">The link name.</param>
            <param name="source">The source where to receive messages.</param>
            <param name="onAttached">The callback that is invoked when an attach performative is received from the peer.</param>
            <returns>An IReceiverLink object.</returns>
        </member>
        <member name="T:Amqp.ILink">
            <summary>
            Represents an AMQP link.
            </summary>
        </member>
        <member name="P:Amqp.ILink.Name">
            <summary>
            Gets the link name.
            </summary>
        </member>
        <member name="M:Amqp.ILink.Detach(Amqp.Framing.Error)">
            <summary>
            Detaches the link endpoint without closing it.
            </summary>
            <param name="error">The error causing a detach.</param>
            <remarks>
            An exception will be thrown if the peer responded with an error
            or the link was closed instead of being detached.
            </remarks>
        </member>
        <member name="T:Amqp.ISenderLink">
            <summary>
            Represents an AMQP sender link.
            </summary>
        </member>
        <member name="M:Amqp.ISenderLink.Send(Amqp.Message)">
            <summary>
            Sends a message and synchronously waits for an acknowledgement. Throws
            TimeoutException if ack is not received after a default timeout.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Amqp.ISenderLink.Send(Amqp.Message,System.TimeSpan)">
            <summary>
            Sends a message and synchronously waits for an acknowledgement. Throws
            TimeoutException if ack is not received in the specified time.
            </summary>
            <param name="message">The message to send.</param>
            <param name="timeout">The time to wait for the acknowledgement.</param>
        </member>
        <member name="M:Amqp.ISenderLink.Send(Amqp.Message,Amqp.OutcomeCallback,System.Object)">
            <summary>
            Sends a message asynchronously. If callback is null, the message is sent without
            requesting for an acknowledgement (best effort).
            </summary>
            <param name="message">The message to send.</param>
            <param name="callback">The callback to invoke when acknowledgement is received.</param>
            <param name="state">The object that is passed back to the outcome callback.</param>
        </member>
        <member name="T:Amqp.IReceiverLink">
            <summary>
            Represents an AMQP receiver link.
            </summary>
        </member>
        <member name="M:Amqp.IReceiverLink.Start(System.Int32,Amqp.MessageCallback)">
            <summary>
            Starts the message pump.
            </summary>
            <param name="credit">The link credit to issue.</param>
            <param name="onMessage">If specified, the callback to invoke when messages are received.
            If not specified, call Receive method to get the messages.</param>
        </member>
        <member name="M:Amqp.IReceiverLink.SetCredit(System.Int32,System.Boolean)">
            <summary>
            Sets a credit on the link. The credit controls how many messages the peer can send.
            </summary>
            <param name="credit">The new link credit.</param>
            <param name="autoRestore">If true, this method is the same as SetCredit(credit, CreditMode.Auto);
            if false, it is the same as SetCredit(credit, CreditMode.Manual).</param>
        </member>
        <member name="M:Amqp.IReceiverLink.SetCredit(System.Int32,Amqp.CreditMode,System.Int32)">
            <summary>
            Sets a credit on the link and the credit management mode.
            </summary>
            <param name="credit">The new link credit.</param>
            <param name="creditMode">The credit management mode.</param>
            <param name="flowThreshold">If credit mode is Auto, it is the threshold of restored
            credits that trigers a flow; ignored otherwise.</param>
        </member>
        <member name="M:Amqp.IReceiverLink.Receive">
            <summary>
            Receives a message. The call is blocked until a message is available or after a default wait time.
            </summary>
            <returns>A Message object if available; otherwise a null value.</returns>
        </member>
        <member name="M:Amqp.IReceiverLink.Receive(System.TimeSpan)">
            <summary>
            Receives a message. The call is blocked until a message is available or the timeout duration expires.
            </summary>
            <param name="timeout">The time to wait for a message.</param>
            <returns>A Message object if available; otherwise a null value.</returns>
            <remarks>
            Use TimeSpan.MaxValue or Timeout.InfiniteTimeSpan to wait infinitely. If TimeSpan.Zero is supplied,
            the call returns immediately.
            </remarks>
        </member>
        <member name="M:Amqp.IReceiverLink.Accept(Amqp.Message)">
            <summary>
            Accepts a message. It sends an accepted outcome to the peer.
            </summary>
            <param name="message">The message to accept.</param>
        </member>
        <member name="M:Amqp.IReceiverLink.Release(Amqp.Message)">
            <summary>
            Releases a message. It sends a released outcome to the peer.
            </summary>
            <param name="message">The message to release.</param>
        </member>
        <member name="M:Amqp.IReceiverLink.Reject(Amqp.Message,Amqp.Framing.Error)">
            <summary>
            Rejects a message. It sends a rejected outcome to the peer.
            </summary>
            <param name="message">The message to reject.</param>
            <param name="error">The error, if any, for the rejection.</param>
        </member>
        <member name="M:Amqp.IReceiverLink.Modify(Amqp.Message,System.Boolean,System.Boolean,Amqp.Types.Fields)">
            <summary>
            Modifies a message. It sends a modified outcome to the peer.
            </summary>
            <param name="message">The message to modify.</param>
            <param name="deliveryFailed">If set, the message's delivery-count is incremented.</param>
            <param name="undeliverableHere">Indicates if the message should not be redelivered to this endpoint.</param>
            <param name="messageAnnotations">Annotations to be combined with the current message annotations.</param>
        </member>
        <member name="T:Amqp.Session">
            <summary>
            The Session class represents an AMQP session.
            </summary>
        </member>
        <member name="M:Amqp.Session.#ctor(Amqp.Connection)">
            <summary>
            Initializes a session object.
            </summary>
            <param name="connection">The connection within which to create the session.</param>
        </member>
        <member name="M:Amqp.Session.#ctor(Amqp.Connection,Amqp.Framing.Begin,Amqp.OnBegin)">
            <summary>
            Initializes a session object with a custom Begin performative.
            </summary>
            <param name="connection">The connection in which the session will be created.</param>
            <param name="begin">The Begin performative to be sent to the remote peer.</param>
            <param name="onBegin">The callback to invoke when a begin is received from peer.</param>
        </member>
        <member name="P:Amqp.Session.Connection">
            <summary>
            Gets the connection where the session was created.
            </summary>
        </member>
        <member name="P:Amqp.Session.SessionState">
            <summary>
            Get the session state. 
            </summary>
        </member>
        <member name="M:Amqp.Session.OnClose(Amqp.Framing.Error)">
            <summary>
            Closes the session.
            </summary>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="T:Amqp.Link">
            <summary>
            The Link class represents an AMQP link.
            </summary>
        </member>
        <member name="M:Amqp.Link.#ctor(Amqp.Session,System.String,Amqp.OnAttached)">
            <summary>
            Initializes the link.
            </summary>
            <param name="session">The session.</param>
            <param name="name">The link name.</param>
            <param name="onAttached">The callback to handle received attach.</param>
        </member>
        <member name="P:Amqp.Link.Name">
            <summary>
            Gets the link name.
            </summary>
        </member>
        <member name="P:Amqp.Link.Handle">
            <summary>
            Gets the link handle.
            </summary>
        </member>
        <member name="P:Amqp.Link.Session">
            <summary>
            Gets the session where the link was created.
            </summary>
        </member>
        <member name="P:Amqp.Link.LinkState">
            <summary>
            Gets the link state.
            </summary>
        </member>
        <member name="M:Amqp.Link.Detach(Amqp.Framing.Error)">
            <summary>
            Detaches the link endpoint without closing it.
            </summary>
            <param name="error">The error causing a detach.</param>
            <remarks>
            An exception will be thrown if the peer responded with an error
            or the link was closed instead of being detached.
            </remarks>
        </member>
        <member name="M:Amqp.Link.OnAbort(Amqp.Framing.Error)">
            <summary>
            Aborts the link.
            </summary>
            <param name="error">The <see cref="T:Amqp.Framing.Error"/> for aborting the link.</param>
        </member>
        <member name="M:Amqp.Link.OnClose(Amqp.Framing.Error)">
            <summary>
            Closes the link.
            </summary>
            <param name="error">The <see cref="T:Amqp.Framing.Error"/> for closing the link.</param>
            <returns></returns>
        </member>
        <member name="T:Amqp.SenderLink">
            <summary>
            The SenderLink represents a link that sends outgoing messages.
            </summary>
        </member>
        <member name="M:Amqp.SenderLink.#ctor(Amqp.Session,System.String,System.String)">
            <summary>
            Initializes a sender link.
            </summary>
            <param name="session">The session within which to create the link.</param>
            <param name="name">The link name.</param>
            <param name="address">The node address.</param>
        </member>
        <member name="M:Amqp.SenderLink.#ctor(Amqp.Session,System.String,Amqp.Framing.Target,Amqp.OnAttached)">
            <summary>
            Initializes a sender link.
            </summary>
            <param name="session">The session within which to create the link.</param>
            <param name="name">The link name.</param>
            <param name="target">The target on attach that specifies the message target.</param>
            <param name="onAttached">The callback to invoke when an attach is received from peer.</param>
        </member>
        <member name="M:Amqp.SenderLink.#ctor(Amqp.Session,System.String,Amqp.Framing.Attach,Amqp.OnAttached)">
            <summary>
            Initializes a sender link.
            </summary>
            <param name="session">The session within which to create the link.</param>
            <param name="name">The link name.</param>
            <param name="attach">The attach frame to send for this link.</param>
            <param name="onAttached">The callback to invoke when an attach is received from peer.</param>
        </member>
        <member name="M:Amqp.SenderLink.Send(Amqp.Message)">
            <summary>
            Sends a message and synchronously waits for an acknowledgement. Throws
            TimeoutException if ack is not received in 60 seconds.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Amqp.SenderLink.Send(Amqp.Message,System.TimeSpan)">
            <summary>
            Sends a message and synchronously waits for an acknowledgement. Throws
            TimeoutException if ack is not received in the specified time.
            </summary>
            <param name="message">The message to send.</param>
            <param name="timeout">The time to wait for the acknowledgement.</param>
        </member>
        <member name="M:Amqp.SenderLink.Send(Amqp.Message,Amqp.OutcomeCallback,System.Object)">
            <summary>
            Sends a message asynchronously. If callback is null, the message is sent without
            requesting for an acknowledgement (best effort).
            </summary>
            <param name="message">The message to send.</param>
            <param name="callback">The callback to invoke when acknowledgement is received.</param>
            <param name="state">The object that is passed back to the outcome callback.</param>
        </member>
        <member name="M:Amqp.SenderLink.Send(Amqp.Message,Amqp.Framing.DeliveryState,Amqp.OutcomeCallback,System.Object)">
            <summary>
            Sends a message asynchronously. If callback is null, the message is sent without
            requesting for an acknowledgement (best effort). This method is not transaction aware. If you need transaction support,
            use <see cref="M:Amqp.SenderLink.Send(Amqp.Message,Amqp.OutcomeCallback,System.Object)"/>.
            </summary>
            <param name="message">The message to send.</param>
            <param name="deliveryState">The transactional state of the message. If null, no transaction is used.</param>
            <param name="callback">The callback to invoke when acknowledgement is received.</param>
            <param name="state">The object that is passed back to the outcome callback.</param>
        </member>
        <member name="M:Amqp.SenderLink.OnClose(Amqp.Framing.Error)">
            <summary>
            Closes the sender link.
            </summary>
            <param name="error">The error for the closure.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.SenderLink.OnAbort(Amqp.Framing.Error)">
            <summary>
            Aborts the sender link.
            </summary>
            <param name="error">The error for the abort.</param>
        </member>
        <member name="T:Amqp.ReceiverLink">
            <summary>
            The ReceiverLink class represents a link that accepts incoming messages.
            </summary>
        </member>
        <member name="M:Amqp.ReceiverLink.#ctor(Amqp.Session,System.String,System.String)">
            <summary>
            Initializes a receiver link.
            </summary>
            <param name="session">The session within which to create the link.</param>
            <param name="name">The link name.</param>
            <param name="address">The node address.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.#ctor(Amqp.Session,System.String,Amqp.Framing.Source,Amqp.OnAttached)">
            <summary>
            Initializes a receiver link.
            </summary>
            <param name="session">The session within which to create the link.</param>
            <param name="name">The link name.</param>
            <param name="source">The source on attach that specifies the message source.</param>
            <param name="onAttached">The callback to invoke when an attach is received from peer.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.#ctor(Amqp.Session,System.String,Amqp.Framing.Attach,Amqp.OnAttached)">
            <summary>
            Initializes a receiver link.
            </summary>
            <param name="session">The session within which to create the link.</param>
            <param name="name">The link name.</param>
            <param name="attach">The attach frame to send for this link.</param>
            <param name="onAttached">The callback to invoke when an attach is received from peer.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.Start(System.Int32,Amqp.MessageCallback)">
            <summary>
            Starts the message pump.
            </summary>
            <param name="credit">The link credit to issue. See <seealso cref="M:Amqp.ReceiverLink.SetCredit(System.Int32,System.Boolean)"/> for more details.</param>
            <param name="onMessage">If specified, the callback to invoke when messages are received.
            If not specified, call Receive method to get the messages.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.SetCredit(System.Int32,System.Boolean)">
            <summary>
            Sets a credit on the link. The credit controls how many messages the peer can send.
            </summary>
            <param name="credit">The new link credit.</param>
            <param name="autoRestore">If true, this method is the same as SetCredit(credit, CreditMode.Auto);
            if false, it is the same as SetCredit(credit, CreditMode.Manual).</param>
        </member>
        <member name="M:Amqp.ReceiverLink.SetCredit(System.Int32,Amqp.CreditMode,System.Int32)">
            <summary>
            Sets a credit on the link and the credit management mode.
            </summary>
            <param name="credit">The new link credit.</param>
            <param name="creditMode">The credit management mode.</param>
            <param name="flowThreshold">If credit mode is Auto, it is the threshold of restored
            credits that trigers a flow; ignored otherwise.</param>
            <remarks>
            The receiver link has a default link credit (200). If the default value is not optimal,
            application should call this method once after the receiver link is created.
            In Auto credit mode, the <paramref name="credit"/> parameter defines the total credits
            of the link which is also the total number messages the remote peer can send. 
            The link keeps track of acknowledged messages and triggers a flow
            when a threshold is reached. The default threshold is half of <see cref="F:Amqp.ReceiverLink.credit"/>. Application
            acknowledges a message by calling <see cref="M:Amqp.ReceiverLink.Accept(Amqp.Message)"/>, <see cref="M:Amqp.ReceiverLink.Reject(Amqp.Message,Amqp.Framing.Error)"/>,
            <see cref="M:Amqp.ReceiverLink.Release(Amqp.Message)"/> or <see cref="M:Amqp.ReceiverLink.Modify(Amqp.Message,System.Boolean,System.Boolean,Amqp.Types.Fields)"/> method.
            In Manual credit mode, the <paramref name="credit"/> parameter defines the extra credits
            of the link which is the additional messages the remote peer can send.
            Please note the following.
            1. In Auto mode, calling this method multiple times with different credits is allowed but not recommended.
               Application may do this if, for example, it needs to control local queue depth based on resource usage.
               If credit is reduced, the link maintains a buffer so incoming messages are still allowed.
            2. The creditMode should not be changed after it is initially set.
            3. To stop a receiver link, set <paramref name="credit"/> to 0. However application should expect
               in-flight messages to come as a result of the previous credit. It is recommended to use the
               Drain mode if the application wishes to stop the messages after a given credit is used.
            4. In drain credit mode, if a drain cycle is still in progress, the call simply returns without
               sending a flow. Application is expected to keep calling <see cref="M:Amqp.ReceiverLink.Receive"/> in a loop
               until all messages are received or a null message is returned.
            5. In manual credit mode, application is responsible for keeping track of processed messages
               and issue more credits when certain conditions are met. 
            </remarks>
        </member>
        <member name="M:Amqp.ReceiverLink.Receive">
            <summary>
            Receives a message. The call is blocked until a message is available or after a default wait time.
            </summary>
            <returns>A Message object if available; otherwise a null value.</returns>
        </member>
        <member name="M:Amqp.ReceiverLink.Receive(System.TimeSpan)">
            <summary>
            Receives a message. The call is blocked until a message is available or the timeout duration expires.
            </summary>
            <param name="timeout">The time to wait for a message.</param>
            <returns>A Message object if available; otherwise a null value.</returns>
            <remarks>
            Use TimeSpan.MaxValue or Timeout.InfiniteTimeSpan to wait infinitely. If TimeSpan.Zero is supplied,
            the call returns immediately.
            </remarks>
        </member>
        <member name="M:Amqp.ReceiverLink.Accept(Amqp.Message)">
            <summary>
            Accepts a message. It sends an accepted outcome to the peer.
            </summary>
            <param name="message">The message to accept.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.Release(Amqp.Message)">
            <summary>
            Releases a message. It sends a released outcome to the peer.
            </summary>
            <param name="message">The message to release.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.Reject(Amqp.Message,Amqp.Framing.Error)">
            <summary>
            Rejects a message. It sends a rejected outcome to the peer.
            </summary>
            <param name="message">The message to reject.</param>
            <param name="error">The error, if any, for the rejection.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.Modify(Amqp.Message,System.Boolean,System.Boolean,Amqp.Types.Fields)">
            <summary>
            Modifies a message. It sends a modified outcome to the peer.
            </summary>
            <param name="message">The message to modify.</param>
            <param name="deliveryFailed">If set, the message's delivery-count is incremented.</param>
            <param name="undeliverableHere">Indicates if the message should not be redelivered to this endpoint.</param>
            <param name="messageAnnotations">Annotations to be combined with the current message annotations.</param>
        </member>
        <member name="M:Amqp.ReceiverLink.Complete(Amqp.Message,Amqp.Framing.DeliveryState)">
            <summary>
            Completes a received message. It settles the delivery and sends
            a disposition with the delivery state to the remote peer.
            </summary>
            <param name="message">The message to complete.</param>
            <param name="deliveryState">An <see cref="T:Amqp.Framing.Outcome"/> or a TransactionalState.</param>
            <remarks>This method is not transaction aware. It should be used to bypass
            transaction context look up when transactions are not used at all, or
            to manage AMQP transactions directly by providing a TransactionalState to
            <paramref name="deliveryState"/>.</remarks>
        </member>
        <member name="M:Amqp.ReceiverLink.OnClose(Amqp.Framing.Error)">
            <summary>
            Closes the receiver link.
            </summary>
            <param name="error">The error for the closure.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.ReceiverLink.OnAbort(Amqp.Framing.Error)">
            <summary>
            Aborts the receiver link.
            </summary>
            <param name="error">The error for the abort.</param>
        </member>
        <member name="T:Amqp.Types.Map">
            <summary>
            A Map class is an AMQP map.
            </summary>
            <summary>
            A Map class is an AMQP map.
            </summary>
        </member>
        <member name="P:Amqp.Types.Map.Item(System.Object)">
            <summary>
            Gets or sets an item in the map.
            </summary>
            <param name="key">The key of the item.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Map.ToString">
            <summary>
            Returns a string that represents the current map object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.List">
            <summary>
            A List class is an AMQP list.
            </summary>
        </member>
        <member name="M:Amqp.Types.List.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Amqp.Types.List"/> class.
            </summary>
        </member>
        <member name="M:Amqp.Types.List.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Amqp.Types.List"/> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="T:Amqp.Types.Decimal">
            <summary>
            Defines the AMQP decimal types. It does not support decimal arithmetic operations.
            It is defined as a wrapper of the decimal payload for protocol passthrough.
            </summary>
        </member>
        <member name="M:Amqp.Types.Decimal.#ctor(System.Byte[])">
            <summary>
            Initializes a new Decimal object to wrap the bytes.
            </summary>
            <param name="bytes">AMQP serialized decimal value (decimal32/64/128)</param>
        </member>
        <member name="P:Amqp.Types.Decimal.Bytes">
            <summary>
            Gets the serialized bytes of the decimal value.
            </summary>
        </member>
        <member name="M:Amqp.Types.Decimal.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current Decimal object.</returns>
        </member>
        <member name="M:Amqp.Types.Decimal.Equals(System.Object)">
            <summary>
            Determines whether the specified Decimal is equal to the current Decimal.
            </summary>
            <param name="obj">The object to compare with the current value.</param>
            <returns>true if the specified object is equal to the current value; otherwise, false.</returns>
        </member>
        <member name="M:Amqp.Types.Decimal.ToString">
            <summary>
            Returns a string that represents the current Decimal.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Amqp.Types.Described">
            <summary>
            A Described class represents an AMQP described value.
            </summary>
        </member>
        <member name="M:Amqp.Types.Described.Encode(Amqp.ByteBuffer)">
            <summary>
            Encodes the current described value into a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
        </member>
        <member name="M:Amqp.Types.Described.Decode(Amqp.ByteBuffer)">
            <summary>
            Decodes the descriptor and the value of the current object from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
        </member>
        <member name="T:Amqp.Types.Fields">
            <summary>
            A mapping from field name to value. The keys are restricted to be of type symbol.
            </summary>
        </member>
        <member name="M:Amqp.Types.Fields.From(System.Object[],System.Int32)">
            <summary>
            Creates a field object from an object in the array at the specified index.
            </summary>
            <param name="array">The object array.</param>
            <param name="index">The index of the object in the array.</param>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.RestrictedDescribed">
            <summary>
            The RestrictedDescribed class is an AMQP described value, whose descriptor is
            restricted to symbol or ulong.
            </summary>
        </member>
        <member name="M:Amqp.Types.RestrictedDescribed.#ctor(Amqp.Types.Descriptor)">
            <summary>
            Initializes a described value.
            </summary>
            <param name="descriptor">The descriptor of the value.</param>
        </member>
        <member name="P:Amqp.Types.RestrictedDescribed.Descriptor">
            <summary>
            Gets the descriptor.
            </summary>
        </member>
        <member name="T:Amqp.Types.DescribedList">
            <summary>
            The DescribedList class consist of a descriptor and an AMQP list.
            </summary>
        </member>
        <member name="M:Amqp.Types.DescribedList.#ctor(Amqp.Types.Descriptor,System.Int32)">
            <summary>
            Initializes the described list object.
            </summary>
            <param name="descriptor">The descriptor of the concrete described list class.</param>
            <param name="fieldCount">The number of fields of the concrete described list class.</param>
        </member>
        <member name="M:Amqp.Types.DescribedList.HasField(System.Int32)">
            <summary>
            Examines the list to check if a field is set.
            </summary>
            <param name="index">Zero-based offset of the field in the list.</param>
            <returns>True if a value is set; otherwise false.</returns>
            <remarks>The field index can be found in the description of each field.</remarks>
        </member>
        <member name="M:Amqp.Types.DescribedList.ResetField(System.Int32)">
            <summary>
            Resets the value of a field to null.
            </summary>
            <param name="index">Zero-based offset of the field in the list.</param>
            <remarks>The field index can be found in the description of each field.</remarks>
        </member>
        <member name="M:Amqp.Types.DescribedList.GetDebugString(System.String,System.Object[],System.Object[])">
            <summary>
            Returns a string representing the current object for tracing purpose.
            </summary>
            <param name="name">The object name.</param>
            <param name="fieldNames">The field names.</param>
            <param name="fieldValues">The field values.</param>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.DescribedMap">
            <summary>
            The DescribedMap class consist of a descriptor and an AMQP map.
            </summary>
        </member>
        <member name="M:Amqp.Types.DescribedMap.#ctor(Amqp.Types.Descriptor,System.Type)">
            <summary>
            Initializes the described map object.
            </summary>
            <param name="descriptor">The descriptor of the concrete described map class.</param>
            <param name="keyType">The allowed key type.</param>
        </member>
        <member name="P:Amqp.Types.DescribedMap.Map">
            <summary>
            Gets the map value.
            </summary>
        </member>
        <member name="P:Amqp.Types.DescribedMap.Item(System.Object)">
            <summary>
            Gets the object associated with the key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.DescribedMap.ToString">
            <summary>
            Returns a string that represents the current map.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.DescribedValue">
            <summary>
            A described value consist of a descriptor and a value. Both of them are valid
            AMQP types.
            </summary>
        </member>
        <member name="M:Amqp.Types.DescribedValue.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a described value.
            </summary>
            <param name="descriptor">The descriptor object.</param>
            <param name="value">The value object.</param>
        </member>
        <member name="P:Amqp.Types.DescribedValue.Descriptor">
            <summary>
            Gets the descriptor object.
            </summary>
        </member>
        <member name="P:Amqp.Types.DescribedValue.Value">
            <summary>
            Gets the value object.
            </summary>
        </member>
        <member name="M:Amqp.Types.DescribedValue.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.Descriptor">
            <summary>
            The descriptor of a described type.
            </summary>
        </member>
        <member name="F:Amqp.Types.Descriptor.Name">
            <summary>
            The descriptor name.
            </summary>
        </member>
        <member name="F:Amqp.Types.Descriptor.Code">
            <summary>
            The descriptor code.
            </summary>
        </member>
        <member name="M:Amqp.Types.Descriptor.#ctor(System.UInt64,System.String)">
            <summary>
            Initializes a descriptor object.
            </summary>
            <param name="code">The descriptor code.</param>
            <param name="name">The descriptor name.</param>
        </member>
        <member name="M:Amqp.Types.Descriptor.ToString">
            <summary>
            Returns a string that represents the current descriptor object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.CreateDescribed">
            <summary>
            The delegate to create a described object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Types.Encode">
            <summary>
            The delegate to encode an object into a buffer.
            </summary>
            <param name="buffer">The buffer to write the encoded object.</param>
            <param name="value">The object to be written.</param>
            <param name="smallEncoding">If true, use compact encoding when possible.</param>
        </member>
        <member name="T:Amqp.Types.Decode">
            <summary>
            The delegate to decode an object from a buffer.
            </summary>
            <param name="buffer">The buffer to read the object.</param>
            <param name="formatCode">The format code of the expected object type.</param>
            <returns>An object decoded from the buffer.</returns>
        </member>
        <member name="T:Amqp.Types.Encoder">
            <summary>
            Encodes or decodes AMQP types.
            </summary>
        </member>
        <member name="M:Amqp.Types.Encoder.TryGetCodec(System.Type,Amqp.Types.Encode@,Amqp.Types.Decode@)">
            <summary>
            Gets the encode and decode delegates for a given type.
            </summary>
            <param name="type">The type used to look for the encode and decode delegates.</param>
            <param name="encoder">The encode delegate for the given type.</param>
            <param name="decoder">The decode delegate for the given type.</param>
            <returns>A boolean value indicating if the delegates are found.</returns>
        </member>
        <member name="M:Amqp.Types.Encoder.AddKnownDescribed(Amqp.Types.Descriptor,Amqp.Types.CreateDescribed)">
            <summary>
            Adds a factory for a custom described type, usually for decoding.
            </summary>
            <param name="descriptor">The descriptor of the type.</param>
            <param name="ctor">The delegate to invoke to create the object.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.DateTimeToTimestamp(System.DateTime)">
            <summary>
            Converts a DateTime value to AMQP timestamp (milliseconds from Unix epoch)
            </summary>
            <param name="dateTime">The DateTime value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Encoder.TimestampToDateTime(System.Int64)">
            <summary>
            Converts an AMQP timestamp ((milliseconds from Unix epoch)) to a DateTime.
            </summary>
            <param name="timestamp">The AMQP timestamp to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadFormatCode(Amqp.ByteBuffer)">
            <summary>
            Reads the format code from the buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <returns>A byte value for the format code.</returns>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteObject(Amqp.ByteBuffer,System.Object,System.Boolean)">
            <summary>
            Writes an AMQP object to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The AMQP value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteBoolean(Amqp.ByteBuffer,System.Boolean,System.Boolean)">
            <summary>
            Writes a boolean value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The boolean value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteUByte(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Writes an unsigned byte value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The unsigned byte value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteUShort(Amqp.ByteBuffer,System.UInt16)">
            <summary>
            Writes an unsigned 16-bit integer value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The unsigned 16-bit integer value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteUInt(Amqp.ByteBuffer,System.UInt32,System.Boolean)">
            <summary>
            Writes an unsigned 32-bit integer value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The unsigned 32-bit integer value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteULong(Amqp.ByteBuffer,System.UInt64,System.Boolean)">
            <summary>
            Writes an unsigned 64-bit integer value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The unsigned 64-bit integer value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteByte(Amqp.ByteBuffer,System.SByte)">
            <summary>
            Writes a signed byte value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The signed byte value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteShort(Amqp.ByteBuffer,System.Int16)">
            <summary>
            Writes a signed 16-bit integer value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The signed 16-bit integer value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteInt(Amqp.ByteBuffer,System.Int32,System.Boolean)">
            <summary>
            Writes a signed 32-bit integer value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The signed 32-bit integer value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteLong(Amqp.ByteBuffer,System.Int64,System.Boolean)">
            <summary>
            Writes a signed 64-bit integer value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The signed 64-bit integer value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteChar(Amqp.ByteBuffer,System.Char)">
            <summary>
            Writes a char value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The char value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteFloat(Amqp.ByteBuffer,System.Single)">
            <summary>
            Writes a 32-bit floating-point value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The 32-bit floating-point value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteDouble(Amqp.ByteBuffer,System.Double)">
            <summary>
            Writes a 64-bit floating-point value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The 64-bit floating-point value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteDecimal(Amqp.ByteBuffer,Amqp.Types.Decimal)">
            <summary>
            Writes a <see cref="T:Amqp.Types.Decimal"/> value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The Decimal value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteTimestamp(Amqp.ByteBuffer,System.DateTime)">
            <summary>
            Writes a timestamp value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The timestamp value which is the milliseconds since UNIX epoch.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteUuid(Amqp.ByteBuffer,System.Guid)">
            <summary>
            Writes a uuid value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The uuid value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteBinary(Amqp.ByteBuffer,System.Byte[],System.Boolean)">
            <summary>
            Writes a binary value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The binary value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteString(Amqp.ByteBuffer,System.String,System.Boolean)">
            <summary>
            Writes a string value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The string value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteSymbol(Amqp.ByteBuffer,Amqp.Types.Symbol,System.Boolean)">
            <summary>
            Writes a symbol value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The symbol value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteList(Amqp.ByteBuffer,System.Collections.IList,System.Boolean)">
            <summary>
            Writes a list value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The list value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteArray(Amqp.ByteBuffer,System.Array)">
            <summary>
            Writes an array value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The array value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.WriteMap(Amqp.ByteBuffer,Amqp.Types.Map,System.Boolean)">
            <summary>
            Writes a map value to a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="value">The map value.</param>
            <param name="smallEncoding">if true, try using small encoding if possible.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadObject(Amqp.ByteBuffer)">
            <summary>
            Reads an object from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadObject(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads an object from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadDescribed(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a described value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadBoolean(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a boolean value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadUByte(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads an unsigned byte value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadUShort(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads an unsigned 16-bit integer from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadUInt(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads an unsigned 32-bit integer from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadULong(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads an unsigned 64-bit integer from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadByte(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a signed byte from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadShort(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a signed 16-bit integer from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadInt(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a signed 32-bit integer from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadLong(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a signed 64-bit integer from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadChar(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a char value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadFloat(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a 32-bit floating-point value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadDouble(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a 64-bit floating-point value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadDecimal(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a <see cref="T:Amqp.Types.Decimal"/> value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadTimestamp(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a timestamp value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadUuid(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a uuid value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadBinary(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a binary value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadString(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a string value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadSymbol(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a symbol value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadList(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a list value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadArray(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads an array value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadMap(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a map value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="M:Amqp.Types.Encoder.ReadFields(Amqp.ByteBuffer,System.Byte)">
            <summary>
            Reads a Fields map value from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="formatCode">The format code of the value.</param>
        </member>
        <member name="T:Amqp.Types.FormatCode">
            <summary>
            The FormatCode class defines the AMQP type format codes.
            </summary>
        </member>
        <member name="T:Amqp.Types.Symbol">
            <summary>
            Defines symbolic values from a constrained domain.
            </summary>
        </member>
        <member name="M:Amqp.Types.Symbol.#ctor(System.String)">
            <summary>
            Initializes a symbol value.
            </summary>
            <param name="value">The string value./</param>
        </member>
        <member name="M:Amqp.Types.Symbol.op_Implicit(System.String)~Amqp.Types.Symbol">
            <summary>
            Converts a string value to a symbol implicitly.
            </summary>
            <param name="value">The string value.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Symbol.op_Implicit(Amqp.Types.Symbol)~System.String">
            <summary>
            Converts a symbol to a string value implicitly.
            </summary>
            <param name="value">the symbol value.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Symbol.Equals(System.Object)">
            <summary>
            Compares equality of an object with the current symbol.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Symbol.GetHashCode">
            <summary>
            Gets the hash code of the symbol object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Amqp.Types.Symbol.ToString">
            <summary>
            Returns a string that represents the current map object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Sasl.SaslChallenge">
            <summary>
            Contains the security mechanism challenge data defined by the SASL specification.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslChallenge.#ctor">
            <summary>
            Initializes the SASL challenge object.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslChallenge.Challenge">
            <summary>
            Gets or sets the security challenge data (index=0).
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslChallenge.ToString">
            <summary>
            Returns a string that represents the current SASL challenge object.
            </summary>
        </member>
        <member name="T:Amqp.Sasl.SaslCode">
            <summary>
            Codes to indicate the outcome of the SASL dialog.
            </summary>
        </member>
        <member name="F:Amqp.Sasl.SaslCode.Ok">
            <summary>
            Connection authentication succeeded.
            </summary>
        </member>
        <member name="F:Amqp.Sasl.SaslCode.Auth">
            <summary>
            Connection authentication failed due to an unspecified problem with the supplied credentials.
            </summary>
        </member>
        <member name="F:Amqp.Sasl.SaslCode.Sys">
            <summary>
            Connection authentication failed due to a system error.
            </summary>
        </member>
        <member name="F:Amqp.Sasl.SaslCode.SysPerm">
            <summary>
            Connection authentication failed due to a system error that is unlikely to be corrected without intervention.
            </summary>
        </member>
        <member name="F:Amqp.Sasl.SaslCode.SysTemp">
            <summary>
            Connection authentication failed due to a transient system error.
            </summary>
        </member>
        <member name="T:Amqp.Sasl.SaslInit">
            <summary>
            SaslInit selects the mechanism and provides the initial response if needed.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslInit.#ctor">
            <summary>
            Initializes a SaslInit object.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslInit.Mechanism">
            <summary>
            Gets or sets the selected security mechanism (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslInit.InitialResponse">
            <summary>
            Gets or sets the initial security response data (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslInit.HostName">
            <summary>
            Gets or sets the name of the target host (index=2).
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslInit.ToString">
            <summary>
            Returns a string that represents the current SASL init object.
            </summary>
        </member>
        <member name="T:Amqp.Sasl.SaslMechanisms">
            <summary>
            Available SASL mechanisms advertised by the server.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslMechanisms.#ctor">
            <summary>
            Initializes a SaslMechanisms object.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslMechanisms.SaslServerMechanisms">
            <summary>
            Gets or sets the available SASL mechanisms (index=0).
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslMechanisms.ToString">
            <summary>
            Returns a string that represents the current SASL mechanisms object.
            </summary>
        </member>
        <member name="T:Amqp.Sasl.SaslOutcome">
            <summary>
            Indicates the outcome of the sasl dialog.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslOutcome.#ctor">
            <summary>
            Initializes a SaslOutcome object.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslOutcome.Code">
            <summary>
            Gets or sets the outcome of the sasl dialog (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslOutcome.AdditionalData">
            <summary>
            Gets or sets the additional data as specified in RFC-4422 (index=1).
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslOutcome.ToString">
            <summary>
            Returns a string that represents the current SASL outcome object.
            </summary>
        </member>
        <member name="T:Amqp.Sasl.SaslProfile">
            <summary>
            The SaslProfile is the base class of an SASL profile implementation. It provides
            the basic support for frame exchange during SASL authentication.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslProfile.#ctor(Amqp.Types.Symbol)">
            <summary>
            Initializes a SaslProfile object.
            </summary>
            <param name="mechanism">The SASL profile mechanism.</param>
        </member>
        <member name="P:Amqp.Sasl.SaslProfile.Anonymous">
            <summary>
            Gets a SASL ANONYMOUS profile.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslProfile.External">
            <summary>
            Gets a SASL EXTERNAL profile.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslProfile.Mechanism">
            <summary>
            Gets the mechanism of the SASL profile.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslProfile.Match(Amqp.Types.Symbol)">
            <summary>
            Checks if a mechanism is supported.
            </summary>
            <param name="mechanism">A mechanism supported by the remote peer.</param>
            <returns>True if the mechanism is supported; False otherwise.</returns>
        </member>
        <member name="M:Amqp.Sasl.SaslProfile.UpgradeTransport(Amqp.ITransport)">
            <summary>
            If a profile needs to change the buffer (e.g. encryption), it should
            create a new ITransport object. Otherwise, it can simply return the
            same transport object.
            </summary>
            <param name="transport">The current transport.</param>
            <returns>A transport upgraded from the current transport per the SASL mechanism.</returns>
        </member>
        <member name="M:Amqp.Sasl.SaslProfile.GetStartCommand(System.String)">
            <summary>
            Gets a SASL command, which is typically a SaslInit command for the client,
            or a SaslMechanisms command for the server, to start SASL negotiation.
            </summary>
            <param name="hostname">The hostname of the remote peer.</param>
            <returns>A SASL command to send to the remote peer.</returns>
        </member>
        <member name="M:Amqp.Sasl.SaslProfile.OnCommand(Amqp.Types.DescribedList)">
            <summary>
            Processes the received command and returns a response. If returns
            null, the SASL handshake completes.
            </summary>
            <param name="command">The SASL command received from the peer.</param>
            <returns>A SASL command as a response to the incoming command.</returns>
        </member>
        <member name="T:Amqp.Sasl.SaslResponse">
            <summary>
            Security mechanism response.
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslResponse.#ctor">
            <summary>
            Initializes a SaslResponse object.
            </summary>
        </member>
        <member name="P:Amqp.Sasl.SaslResponse.Response">
            <summary>
            Gets or sets the security response data (index=0).
            </summary>
        </member>
        <member name="M:Amqp.Sasl.SaslResponse.ToString">
            <summary>
            Returns a string that represents the current SASL response object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Accepted">
            <summary>
            The accepted outcome.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Accepted.#ctor">
            <summary>
            Initializes an accepted outcome.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Accepted.ToString">
            <summary>
            Returns a string that represents the current accepted outcome.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.ApplicationProperties">
            <summary>
            The class defines the application properties section of an AMQP messages.
            </summary>
        </member>
        <member name="M:Amqp.Framing.ApplicationProperties.#ctor">
            <summary>
            Initializes the application properties section.
            </summary>
        </member>
        <member name="M:Amqp.Framing.ApplicationProperties.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Attach">
            <summary>
            The Attach class defines an attach frame to attach a Link Endpoint to the Session.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Attach.#ctor">
            <summary>
            Initializes an attach object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.LinkName">
            <summary>
            Gets or sets the name field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.Handle">
            <summary>
            Gets or sets the handle field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.Role">
            <summary>
            Gets or sets the role field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.SndSettleMode">
            <summary>
            Gets or sets the snd-settle-mode field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.RcvSettleMode">
            <summary>
            Gets or sets the rcv-settle-mode field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.Source">
            <summary>
            Gets or sets the source field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.Target">
            <summary>
            Gets or sets the target field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.Unsettled">
            <summary>
            Gets or sets the unsettled field (index=7).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.IncompleteUnsettled">
            <summary>
            Gets or sets the incomplete-unsettled field (index=8).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.InitialDeliveryCount">
            <summary>
            Gets or sets the initial-delivery-count field (index=9).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.MaxMessageSize">
            <summary>
            Gets or sets the max-message-size field (index=10).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.OfferedCapabilities">
            <summary>
            Gets or sets the offered-capabilities field (index=11).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.DesiredCapabilities">
            <summary>
            Gets or sets the desired-capabilities field (index=12).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Attach.Properties">
            <summary>
            Gets or sets the properties field (index=13).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Attach.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Begin">
            <summary>
            The Begin class contains parameters to begin a session in a connection.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Begin.#ctor">
            <summary>
            Initializes a Begin object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.RemoteChannel">
            <summary>
            Gets or sets the remote-channel field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.NextOutgoingId">
            <summary>
            Gets or sets the next-outgoing-id field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.IncomingWindow">
            <summary>
            Gets or sets the incoming-window field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.OutgoingWindow">
            <summary>
            Gets or sets the outgoing-window field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.HandleMax">
            <summary>
            Gets or sets the handle-max field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.OfferedCapabilities">
            <summary>
            Gets or sets the offered-capabilities field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.DesiredCapabilities">
            <summary>
            Gets or sets the desired-capabilities field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Begin.Properties">
            <summary>
            Gets or sets the properties field (index=7).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Begin.ToString">
            <summary>
            Returns a string that represents the current begin object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Close">
            <summary>
            The Close class contains parameters to signal a connection close. 
            </summary>
        </member>
        <member name="M:Amqp.Framing.Close.#ctor">
            <summary>
            Initializes a Close object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Close.Error">
            <summary>
            Gets or sets the error field (index=0).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Close.ToString">
            <summary>
            Returns a string that represents the current begin object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.AmqpValue">
            <summary>
            An AMQP Value section contains a single value.
            </summary>
        </member>
        <member name="M:Amqp.Framing.AmqpValue.#ctor">
            <summary>
            Initializes an AmqpValue object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.AmqpValue.Value">
            <summary>
            Gets or sets the value in the body section.
            </summary>
        </member>
        <member name="P:Amqp.Framing.AmqpValue.ValueBuffer">
            <summary>
            Gets a ByteBuffer that contains the encoded value. A NULL value
            indicates that the message is not created by the decoder.
            </summary>
        </member>
        <member name="M:Amqp.Framing.AmqpValue.WriteValue(Amqp.ByteBuffer,System.Object)">
            <summary>
            Writes the value into the buffer using the default encoder. Override
            this method to encode the value using an extended or custom encoder.
            </summary>
            <param name="buffer">The buffer to write the encoded object.</param>
            <param name="value">The object to be written.</param>
        </member>
        <member name="T:Amqp.Framing.AmqpSequence">
            <summary>
            A sequence section contains an arbitrary number of structured data elements.
            </summary>
        </member>
        <member name="M:Amqp.Framing.AmqpSequence.#ctor">
            <summary>
            Initializes an AmqpSequence object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.AmqpSequence.List">
            <summary>
            Gets or sets the list (data elements) in the section.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Data">
            <summary>
            A data section contains opaque binary data.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Data.#ctor">
            <summary>
            Initializes a Data object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Data.Binary">
            <summary>
            Gets or sets the binary data in this section.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Data.Buffer">
            <summary>
            Gets or sets the binary data contained in a buffer in this section.
            </summary>
        </member>
        <member name="T:Amqp.Framing.DeliveryAnnotations">
            <summary>
            The delivery-annotations section is used for delivery-specific non-standard
            properties at the head of the message.
            </summary>
        </member>
        <member name="M:Amqp.Framing.DeliveryAnnotations.#ctor">
            <summary>
            Initializes a delivery annotations section.
            </summary>
        </member>
        <member name="M:Amqp.Framing.DeliveryAnnotations.ToString">
            <summary>
            Returns a string that represents the current delivery annotations object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.DeliveryState">
            <summary>
            The Messaging layer defines a concrete set of delivery states which can be used
            to indicate the state of the message at the receiver.
            </summary>
        </member>
        <member name="M:Amqp.Framing.DeliveryState.#ctor(Amqp.Types.Descriptor,System.Int32)">
            <summary>
            Initializes the delivery state object.
            </summary>
            <param name="descriptor">The descriptor of the concrete delivery state class.</param>
            <param name="fieldCount">The number of fields of the concrete delivery state class.</param>
        </member>
        <member name="T:Amqp.Framing.Detach">
            <summary>
            The Detach class contains parameters to detach the link endpoint from the session.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Detach.#ctor">
            <summary>
            Initializes a Detach object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Detach.Handle">
            <summary>
            Gets or sets the handle field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Detach.Closed">
            <summary>
            Gets or sets the closed field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Detach.Error">
            <summary>
            Gets or sets the error field (index=2).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Detach.ToString">
            <summary>
            Returns a string that represents the current begin object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Dispose">
            <summary>
            The Dispose class defines a disposition frame to inform remote peer of delivery state changes.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Dispose.#ctor">
            <summary>
            Initializes a dispose object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Dispose.Role">
            <summary>
            Gets or sets the role field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Dispose.First">
            <summary>
            Gets or sets the first field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Dispose.Last">
            <summary>
            Gets or sets the last field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Dispose.Settled">
            <summary>
            Gets or sets the settled field (index=3). 
            </summary>
        </member>
        <member name="P:Amqp.Framing.Dispose.State">
            <summary>
            Gets or sets the state field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Dispose.Batchable">
            <summary>
            Gets or sets the batchable field (index=5).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Dispose.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.End">
            <summary>
            The End class defines an end frame that indicates that the session has ended.
            </summary>
        </member>
        <member name="M:Amqp.Framing.End.#ctor">
            <summary>
            Initializes an end object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.End.Error">
            <summary>
            Gets or sets the error field (index=0).
            </summary>
        </member>
        <member name="M:Amqp.Framing.End.ToString">
            <summary>
            Returns a string that represents the current begin object. 
            </summary>
        </member>
        <member name="T:Amqp.Framing.Error">
            <summary>
            Defines the details of an error.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Error.#ctor">
            <summary>
            Initializes an error object.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Error.#ctor(Amqp.Types.Symbol)">
            <summary>
            Initializes an error object.
            </summary>
            <param name="condition">The error condition (<see cref="T:Amqp.ErrorCode"/> for standard error conditions).</param>
        </member>
        <member name="P:Amqp.Framing.Error.Condition">
            <summary>
            Gets or sets a symbolic value indicating the error condition (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Error.Description">
            <summary>
            Gets or sets the descriptive text about the error condition (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Error.Info">
            <summary>
            Gets or sets the map carrying information about the error condition (index=2).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Error.ToString">
            <summary>
            Returns a string that represents the current error object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Flow">
            <summary>
            The Flow class defines a flow frame that updates the flow state for the specified link.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Flow.#ctor">
            <summary>
            Initializes a flow object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.HasHandle">
            <summary>
            Indicates if handle field was defined (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.NextIncomingId">
            <summary>
            Gets or sets the next-incoming-id field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.IncomingWindow">
            <summary>
            Gets or sets the incoming-window field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.NextOutgoingId">
            <summary>
            Gets or sets the next-outgoing-id field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.OutgoingWindow">
            <summary>
            Gets or sets the outgoing-window field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.Handle">
            <summary>
            Gets or sets the handle field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.DeliveryCount">
            <summary>
            Gets or sets the delivery-count field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.LinkCredit">
            <summary>
            Gets or sets the link-credit field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.Available">
            <summary>
            Gets or sets the available field (index=7).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.Drain">
            <summary>
            Gets or sets the drain field (index=8).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.Echo">
            <summary>
            Gets or sets the echo field (index=9).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Flow.Properties">
            <summary>
            Gets or sets the properties field (index=10).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Flow.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Footer">
            <summary>
            The Footer class represents the footer section of a message.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Footer.#ctor">
            <summary>
            Initializes a footer section.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Footer.ToString">
            <summary>
            Returns a string that represents the current footer object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Header">
            <summary>
            The header section carries standard delivery details about the transfer of a
            Message through the AMQP network.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Header.#ctor">
            <summary>
            Initializes a header object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Header.Durable">
            <summary>
            Gets or sets the durable field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Header.Priority">
            <summary>
            Gets or sets the priority field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Header.Ttl">
            <summary>
            Gets or sets the ttl field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Header.FirstAcquirer">
            <summary>
            Gets or sets the first-acquirer field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Header.DeliveryCount">
            <summary>
            Gets or sets the delivery-count field (index=4).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Header.ToString">
            <summary>
            Returns a string that represents the current header object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.MessageAnnotations">
            <summary>
            The message-annotations section is used for properties of the message which are
            aimed at the infrastructure and should be propagated across every delivery step.
            </summary>
        </member>
        <member name="M:Amqp.Framing.MessageAnnotations.#ctor">
            <summary>
            Initializes a message annotations section.
            </summary>
        </member>
        <member name="M:Amqp.Framing.MessageAnnotations.ToString">
            <summary>
            Returns a string that represents the current message annotations object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Modified">
            <summary>
            The Modified class defines the modified outcome.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Modified.#ctor">
            <summary>
            Initializes a modified outcome.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Modified.DeliveryFailed">
            <summary>
            Gets or sets the delivery-failed field.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Modified.UndeliverableHere">
            <summary>
            Gets or sets the undeliverable-here field.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Modified.MessageAnnotations">
            <summary>
            Gets or sets the message-annotations field.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Modified.ToString">
            <summary>
            Returns a string that represents the current modified object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Open">
            <summary>
            The Open class defines the connection negotiation parameters.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Open.#ctor">
            <summary>
            Initializes the Open object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.ContainerId">
            <summary>
            Gets or sets the container-id field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.HostName">
            <summary>
            Gets or sets the hostname field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.MaxFrameSize">
            <summary>
            Gets or sets the max-frame-size field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.ChannelMax">
            <summary>
            Gets or sets the channel-max field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.IdleTimeOut">
            <summary>
            Gets or sets the idle-time-out field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.OutgoingLocales">
            <summary>
            Gets or sets the outgoing-locales field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.IncomingLocales">
            <summary>
            Gets or sets the incoming-locales field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.OfferedCapabilities">
            <summary>
            Gets or sets the offered-capabilities field (index=7).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.DesiredCapabilities">
            <summary>
            Gets or sets the desired-capabilities field (index=8).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Open.Properties">
            <summary>
            Gets or sets the properties field (index=9).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Open.ToString">
            <summary>
            Returns a string that represents the current open object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Outcome">
            <summary>
            Outcome is a terminal delivery-state of a delivery.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Outcome.#ctor(Amqp.Types.Descriptor,System.Int32)">
            <summary>
            Initializes the outcome object.
            </summary>
            <param name="descriptor">The descriptor of the concrete outcome class.</param>
            <param name="fieldCount">The number of fields of the concrete outcome class.</param>
        </member>
        <member name="T:Amqp.Framing.Properties">
            <summary>
            The Properties class defines the Immutable properties of the Message.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Properties.#ctor">
            <summary>
            Initializes a properties section.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.MessageId">
            <summary>
            Gets or sets the message-id field (index=0).
            </summary>
            <remarks>
            The default message identifier type assumed by the library is string.
            If the application needs to process other types (ulong, uuid, or binary),
            it must use the Get/SetMessageId methods.
            </remarks>
        </member>
        <member name="P:Amqp.Framing.Properties.UserId">
            <summary>
            Gets or sets the user-id field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.To">
            <summary>
            Gets or sets the to field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.Subject">
            <summary>
            Gets or sets the subject field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.ReplyTo">
            <summary>
            Gets or sets the reply-to field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.CorrelationId">
            <summary>
            Gets or sets the correlation-id field (index=5).
            </summary>
            <remarks>
            The default correlation identifier type assumed by the library is string.
            If the application needs to process other types (ulong, uuid, or binary),
            it must use the Get/SetCorrelationId methods.
            </remarks>
        </member>
        <member name="P:Amqp.Framing.Properties.ContentType">
            <summary>
            Gets or sets the content-type field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.ContentEncoding">
            <summary>
            Gets or sets the content-encoding field (index=7).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.AbsoluteExpiryTime">
            <summary>
            Gets or sets the absolute-expiry-time field (index=8).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.CreationTime">
            <summary>
            Gets or sets the creation-time field (index=9).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.GroupId">
            <summary>
            Gets or sets the group-id field (index=10).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.GroupSequence">
            <summary>
            Gets or sets the group-sequence field (index=11).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Properties.ReplyToGroupId">
            <summary>
            Gets or sets the reply-to-group-id field (index=12).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Properties.GetMessageId">
            <summary>
            Gets the message identifier.
            </summary>
            <returns>An object representing the message identifier. null if
            it is not set.</returns>
        </member>
        <member name="M:Amqp.Framing.Properties.SetMessageId(System.Object)">
            <summary>
            Sets the message identifier. If not null, the object type must be
            string, Guid, ulong or byte[].
            </summary>
            <param name="id">The identifier object to set.</param>
        </member>
        <member name="M:Amqp.Framing.Properties.GetCorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
            <returns>An object representing the message identifier. null if
            it is not set.</returns>
        </member>
        <member name="M:Amqp.Framing.Properties.SetCorrelationId(System.Object)">
            <summary>
            Sets the correlation identifier. If not null, the object type must be
            string, Guid, ulong or byte[].
            </summary>
            <param name="id">The identifier object to set.</param>
        </member>
        <member name="M:Amqp.Framing.Properties.ToString">
            <summary>
            Returns a string that represents the current properties object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.ReceiverSettleMode">
            <summary>
            Defines the settlement policy for a receiver.
            </summary>
        </member>
        <member name="F:Amqp.Framing.ReceiverSettleMode.First">
            <summary>
            The Receiver will spontaneously settle all incoming transfers.
            </summary>
        </member>
        <member name="F:Amqp.Framing.ReceiverSettleMode.Second">
            <summary>
            The receiver will only settle after sending the disposition to the sender and
            receiving a disposition indicating settlement of the delivery from the sender.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Rejected">
            <summary>
            The rejected outcome is a terminal delivery state.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Rejected.#ctor">
            <summary>
            Initializes a rejected object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Rejected.Error">
            <summary>
            Gets or sets the error field.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Rejected.ToString">
            <summary>
            Returns a string that represents the current rejected object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Released">
            <summary>
            The released outcome is a terminal delivery state.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Released.#ctor">
            <summary>
            Initializes a released object.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Released.ToString">
            <summary>
            Returns a string that represents the current released object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.SenderSettleMode">
            <summary>
            Defines the settlement policy for a sender.
            </summary>
        </member>
        <member name="F:Amqp.Framing.SenderSettleMode.Unsettled">
            <summary>
            The Sender will send all deliveries initially unsettled to the receiver.
            </summary>
        </member>
        <member name="F:Amqp.Framing.SenderSettleMode.Settled">
            <summary>
            The Sender will send all deliveries settled to the receiver.
            </summary>
        </member>
        <member name="F:Amqp.Framing.SenderSettleMode.Mixed">
            <summary>
            The sender may send a mixture of settled and unsettled deliveries to the receiver.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Source">
            <summary>
            The source is comprised of an address coupled with properties that determine
            message transfer behavior.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Source.#ctor">
            <summary>
            Initializes a source object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.Address">
            <summary>
            Gets or sets the address field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.Durable">
            <summary>
            Gets or sets the durable field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.ExpiryPolicy">
            <summary>
            Gets or sets the expiry-policy field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.Timeout">
            <summary>
            Gets or sets the timeout field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.Dynamic">
            <summary>
            Gets or sets the dynamic field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.DynamicNodeProperties">
            <summary>
            Gets or sets the dynamic-node-properties field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.DistributionMode">
            <summary>
            Gets or sets the distribution-mode field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.FilterSet">
            <summary>
            Gets or sets the filter field (index=7).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.DefaultOutcome">
            <summary>
            Gets or sets the default-outcome field (index=8).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.Outcomes">
            <summary>
            Gets or sets the outcomes field (index=9).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Source.Capabilities">
            <summary>
            Gets or sets the capabilities field (index=10).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Source.ToString">
            <summary>
            Returns a string that represents the current source object.
            </summary>
        </member>
        <member name="T:Amqp.Framing.Target">
            <summary>
            The target is comprised of an address coupled with properties that determine
            message transfer behavior.
            </summary>
        </member>
        <member name="M:Amqp.Framing.Target.#ctor">
            <summary>
            Initializes a target object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.Address">
            <summary>
            Gets or sets the address field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.Durable">
            <summary>
            Gets or sets the durable field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.ExpiryPolicy">
            <summary>
            Gets or sets the expiry-policy field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.Timeout">
            <summary>
            Gets or sets the timeout field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.Dynamic">
            <summary>
            Gets or sets the dynamic field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.DynamicNodeProperties">
            <summary>
            Gets or sets the dynamic-node-properties field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Target.Capabilities">
            <summary>
            Gets or sets the capabilities field (index=6).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Target.ToString">
            <summary>
            Returns a string that represents the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.Transfer">
            <summary>
            The Transfer class defines an transfer frame to send messages across a link. 
            </summary>
        </member>
        <member name="M:Amqp.Framing.Transfer.#ctor">
            <summary>
            Initializes an transfer object.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.HasDeliveryId">
            <summary>
            Gets if the delivery-id field (index=1) is set.
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.Handle">
            <summary>
            Gets or sets the handle field (index=0).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.DeliveryId">
            <summary>
            Gets or sets the delivery-id field (index=1).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.DeliveryTag">
            <summary>
            Gets or sets the delivery-tag field (index=2).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.MessageFormat">
            <summary>
            Gets or sets the message-format field (index=3).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.Settled">
            <summary>
            Gets or sets the settled field (index=4).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.More">
            <summary>
            Gets or sets the more field (index=5).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.RcvSettleMode">
            <summary>
            Gets or sets the rcv-settle-mode field (index=6).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.State">
            <summary>
            Gets or sets the state field (index=7).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.Resume">
            <summary>
            Gets or sets the resume field (index=8).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.Aborted">
            <summary>
            Gets or sets the aborted field (index=9).
            </summary>
        </member>
        <member name="P:Amqp.Framing.Transfer.Batchable">
            <summary>
            Gets or sets the batchable field (index=10).
            </summary>
        </member>
        <member name="M:Amqp.Framing.Transfer.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Amqp.Framing.AmqpValue`1">
            <summary>
            An AMQP Value section contains a single strongly typed value.
            </summary>
        </member>
        <member name="M:Amqp.Framing.AmqpValue`1.#ctor(`0)">
            <summary>
            Initializes an AmqpValue object.
            </summary>
        </member>
        <member name="M:Amqp.Framing.AmqpValue`1.#ctor(`0,Amqp.Serialization.AmqpSerializer)">
            <summary>
            Initializes an AmqpValue object with an <see cref="T:Amqp.Serialization.AmqpSerializer"/> that
            is used to serialize the value.
            </summary>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Amqp.Framing.AmqpValue`1.WriteValue(Amqp.ByteBuffer,System.Object)">
            <summary>
            Writes the value into the buffer using AmqpSerializer.
            </summary>
            <param name="buffer">The buffer to write the encoded object.</param>
            <param name="value">The object to be written.</param>
        </member>
        <member name="T:Amqp.ITransport">
            <summary>
            The transport interface used by a connection for network I/O.
            </summary>
        </member>
        <member name="M:Amqp.ITransport.Send(Amqp.ByteBuffer)">
            <summary>
            Sends a buffer.
            </summary>
            <param name="buffer">The buffer to send.</param>
        </member>
        <member name="M:Amqp.ITransport.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives a buffer.
            </summary>
            <param name="buffer">The buffer to store the received bytes.</param>
            <param name="offset">The start position.</param>
            <param name="count">The number of bytes to receive.</param>
            <returns>The number of bytes received. It may be less than <paramref name="count"/>.
            A value of 0 means that the transport is closed.</returns>
        </member>
        <member name="M:Amqp.ITransport.Close">
            <summary>
            Closes the transport.
            </summary>
        </member>
        <member name="T:Amqp.LinkState">
            <summary>
            The state of a link.
            </summary>
        </member>
        <member name="F:Amqp.LinkState.Start">
            <summary>
            The link is started.
            </summary>
        </member>
        <member name="F:Amqp.LinkState.AttachSent">
            <summary>
            Attach frame was sent.
            </summary>
        </member>
        <member name="F:Amqp.LinkState.AttachReceived">
            <summary>
            Attach frame was received.
            </summary>
        </member>
        <member name="F:Amqp.LinkState.Attached">
            <summary>
            The link is attached.
            </summary>
        </member>
        <member name="F:Amqp.LinkState.DetachPipe">
            <summary>
            The link is detaching. 
            </summary>
        </member>
        <member name="F:Amqp.LinkState.DetachSent">
            <summary>
            Detach frame was sent. 
            </summary>
        </member>
        <member name="F:Amqp.LinkState.DetachReceived">
            <summary>
            Detach frame was received. 
            </summary>
        </member>
        <member name="F:Amqp.LinkState.End">
            <summary>
            The link is closed.
            </summary>
        </member>
        <member name="T:Amqp.Message">
            <summary>
            The Message class represents an AMQP message.
            </summary>
        </member>
        <member name="F:Amqp.Message.Header">
            <summary>
            The header section.
            </summary>
        </member>
        <member name="F:Amqp.Message.DeliveryAnnotations">
            <summary>
            The delivery annotation section.
            </summary>
        </member>
        <member name="F:Amqp.Message.MessageAnnotations">
            <summary>
            The message annotation section.
            </summary>
        </member>
        <member name="F:Amqp.Message.Properties">
            <summary>
            The properties section.
            </summary>
        </member>
        <member name="F:Amqp.Message.ApplicationProperties">
            <summary>
            The application properties section.
            </summary>
        </member>
        <member name="F:Amqp.Message.BodySection">
            <summary>
            The body section. The library supports one section only.
            </summary>
        </member>
        <member name="F:Amqp.Message.Footer">
            <summary>
            The footer section.
            </summary>
        </member>
        <member name="M:Amqp.Message.#ctor">
            <summary>
            Initializes an empty message.
            </summary>
        </member>
        <member name="M:Amqp.Message.#ctor(System.Object)">
            <summary>
            Initializes a message from an object as the body. The object is wrapped
            in an <see cref="T:Amqp.Framing.AmqpValue"/> section. To control the body section type,
            create an empty message and set <see cref="F:Amqp.Message.BodySection"/> to either
            <see cref="T:Amqp.Framing.AmqpValue"/>, <see cref="T:Amqp.Framing.Data"/> or <see cref="T:Amqp.Framing.AmqpSequence"/>.
            </summary>
            <param name="body">the object stored in the AmqpValue section.</param>
        </member>
        <member name="P:Amqp.Message.Body">
            <summary>
            Gets the object from the body. The returned value depends on the type of the body section.
            Use the BodySection field if the entire section is needed.
            </summary>
        </member>
        <member name="P:Amqp.Message.DeliveryTag">
            <summary>
            Gets the delivery tag associated with the message.
            </summary>
        </member>
        <member name="M:Amqp.Message.Encode">
            <summary>
            Encodes the message into a buffer.
            </summary>
            <returns>The buffer.</returns>
        </member>
        <member name="M:Amqp.Message.Decode(Amqp.ByteBuffer)">
            <summary>
            Decodes a message from a buffer and advance the buffer read cursor.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Message.Dispose">
            <summary>
            Disposes the current message to release resources.
            </summary>
        </member>
        <member name="T:Amqp.Fx">
            <summary>
            Provides framework specific routines.
            </summary>
        </member>
        <member name="M:Amqp.Fx.Assert(System.Boolean,System.String)">
            <summary>
            Asserts a condition is true.
            </summary>
            <param name="condition">A boolean value indicating the condition.</param>
            <param name="message">The error message if condition is not met.</param>
        </member>
        <member name="M:Amqp.Fx.Format(System.String,System.Object[])">
            <summary>
            Formats a string from a format and an array of arguments.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Amqp.SRAmqp">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpProtocolMismatch">
            <summary>
              Looks up a localized string similar to The protocol requested by peer &apos;{0}&apos; does not match expected &apos;{1}&apos;. Make sure both sides agree on protocol id and version..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpChannelNotFound">
            <summary>
              Looks up a localized string similar to The session channel &apos;{0}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpHandleExceeded">
            <summary>
              Looks up a localized string similar to Cannot allocate more handles. The maximum number of handles is {0}..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpHandleInUse">
            <summary>
              Looks up a localized string similar to The handle &apos;{0}&apos; is already allocated for &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpHandleNotFound">
            <summary>
              Looks up a localized string similar to The link handle &apos;{0}&apos; cannot be found in session &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpIllegalOperationState">
            <summary>
              Looks up a localized string similar to Operation &apos;{0}&apos; is not valid under state: {1}..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpInvalidFormatCode">
            <summary>
              Looks up a localized string similar to The format code &apos;{0}&apos; at frame buffer offset &apos;{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpOperationNotSupported">
            <summary>
              Looks up a localized string similar to {0} is not supported over AMQP..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpTimeout">
            <summary>
              Looks up a localized string similar to The operation {0} did not complete within the allocated time {1} for object {2}..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.AmqpUnknownDescriptor">
            <summary>
              Looks up a localized string similar to The descriptor {0} is unknown..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.DeliveryLimitExceeded">
            <summary>
              Looks up a localized string similar to There is no credit to accept a new delivery (id={0}) on the link..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.EncodingTypeNotSupported">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a valid AMQP type and cannot be encoded..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.InvalidAddressFormat">
            <summary>
              Looks up a localized string similar to The address is not correctly formatted..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.InvalidDeliveryIdOnTransfer">
            <summary>
              Looks up a localized string similar to transfer.delivery-id {0} is invalid (expect: {1}).
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.InvalidFrameSize">
            <summary>
              Looks up a localized string similar to Invalid frame size:{0}, maximum frame size:{1}..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.InvalidMapCount">
            <summary>
              Looks up a localized string similar to The map count {0} is invalid. It must be an even number..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.InvalidMapKeyType">
            <summary>
              Looks up a localized string similar to The key type {0} is invalid. The map key is restricted to {1}..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.InvalidSequenceNumberComparison">
            <summary>
              Looks up a localized string similar to Comparison of {0} and {1} is invalid because the result is undefined..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.LinkNotFound">
            <summary>
              Looks up a localized string similar to The link name {0} in the received attach cannot be found..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.SaslNegoFailed">
            <summary>
              Looks up a localized string similar to Sasl negotiation failed with code {0}..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.WindowViolation">
            <summary>
              Looks up a localized string similar to There is no window to accept an incoming transfer (incoming-id={0})..
            </summary>
        </member>
        <member name="P:Amqp.SRAmqp.TransportClosed">
            <summary>
              Looks up a localized string similar to The transport &apos;{0}&apos; is closed..
            </summary>
        </member>
        <member name="T:Amqp.SequenceNumber">
            <summary>
            RFC1982: http://tools.ietf.org/html/rfc1982
            </summary>
        </member>
        <member name="T:Amqp.Serialization.AmqpContract">
            <summary>
            The AMQP contract for serializing a custom type.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.AmqpContract.#ctor(System.Type)">
            <summary>
            Creates a contract object for a given type.
            </summary>
            <param name="type">The type that the contract is for.</param>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Type">
            <summary>
            Gets the type associated with the contract.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Attribute">
            <summary>
            Gets or sets the <see cref="T:Amqp.Serialization.AmqpContractAttribute"/> of the type. 
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Members">
            <summary>
            Gets or sets the members of the type for serialization.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Provides">
            <summary>
            Gets or sets the types that this type can provide (typically through inheritance).
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Serializing">
            <summary>
            Gets or sets the method to invoke before serialization. (<seealso cref="T:Amqp.Serialization.OnSerializingAttribute"/> .
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Serialized">
            <summary>
            Gets or sets the method to invoke after serialization. (<seealso cref="T:Amqp.Serialization.OnSerializedAttribute"/> .
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Deserializing">
            <summary>
            Gets or sets the method to invoke before deserialization. (<seealso cref="T:Amqp.Serialization.OnDeserializingAttribute"/> .
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.Deserialized">
            <summary>
            Gets or sets the method to invoke after deserialization. (<seealso cref="T:Amqp.Serialization.OnDeserializedAttribute"/> .
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContract.BaseContract">
            <summary>
            Gets or sets the contract of the base type if it exists.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.AmqpContractAttribute">
            <summary>
            Specifies that the type is serializable by the AMQP serializer.
            </summary>
            <remarks>
            The object is serialized as an AMQP described list, a described map,
            or a simple map, as determined by the Encoding property. The default value is List.
            
            The Name or Code property specifies the symbol descriptor or the ulong descriptor
            of the described value, respectively. If both are set, the Code property
            (ulong descriptor) takes precedence. If none is set, the class's full name is used
            as the symbol descriptor. It is recommended to include a domain name/code in the
            descriptor to avoid collision. For example, Name can be "com.microsoft:my-class",
            and Code can be 0x0000013700000001 (domain code is the company number defined at
            http://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
            
            List or Map encoding encodes the object as a described type, which contains the above
            mentioned descriptor and the value (a list or a map). SimpleMap encodes the object
            as a map value without a descriptor. How the value is encoded depends on EncodingType.
            List: the value is encoded as an AMQP List that contains all fields/properties of
            the class decorated with AmqpMemberAttribute. The Order property of the AmqpMember
            attribute determines the relative positions of the members in the list. Duplicate
            Order values are not allowed. If the class is derived from a base class, the
            AmqpMember fields/properties of the base class, if any, are also included in the list.
            The list is flattened.
            Map: the value is encoded as an AMQP map that contains all fields/properties of
            the class decorated with AmqpMemberAttribute. The key type is AMQP symbol. The key
            values are determined by the Name property of each AmqpMember attribute. If the class
            is derived from a base class, the AmqpMember fields/properties of the base class,
            if any, are also included in the map. Though the items in an AMQP map are ordered,
            the serializer ignores the Order property of the AmqpMember attribute.
            SimpleMap: value encoding is the same as Map except that the keys are AMQP string.
            Because this encoding does not have descriptors, decoding an object with a base type
            decorated with AmqpProvidesAttribute is not supported.
            SimpleList: value encoding is the same as List except that no initial descriptor is
            written. Because this encoding does not have descriptors, decoding an object with a
            base type decorated with AmqpProvidesAttribute is not supported.
            </remarks>
        </member>
        <member name="M:Amqp.Serialization.AmqpContractAttribute.#ctor">
            <summary>
            Initializes a new instance of the AmqpContractAttribute class.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContractAttribute.Name">
            <summary>
            Gets or sets the descriptor name for the type.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContractAttribute.Code">
            <summary>
            Gets or sets the descriptor code for the type.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpContractAttribute.Encoding">
            <summary>
            Gets or sets the encoding type for the type.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.AmqpContractResolver">
            <summary>
            Creates a serialization contract for types with <see cref="T:Amqp.Serialization.AmqpContractAttribute"/>
            and <see cref="T:Amqp.Serialization.AmqpMemberAttribute"/> attributes defined.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.AmqpContractResolver.OnResolved(Amqp.Serialization.AmqpContract)">
            <summary>
            Called when a type is successfully resolved. Derived class can
            override this method to update the contract if necessary.
            </summary>
            <param name="contract">The serialization contract.</param>
        </member>
        <member name="T:Amqp.Serialization.AmqpMember">
            <summary>
            Represents an AMQP member (a field or a property) within a contract.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpMember.Attribute">
            <summary>
            The attribute on the member.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpMember.Info">
            <summary>
            The member info provided by the system.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.AmqpSerializer">
            <summary>
            Serializes and deserializes an instance of an AMQP type.
            The descriptor (name and code) is scoped to and must be
            unique within an instance of the serializer.
            When the static Serialize and Deserialize methods are called,
            the default instance is used.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.#ctor">
            <summary>
            Initializes a new instance of the AmqpSerializer class with the default contract
            resolver that supports custom classes decorated with
            <see cref="T:Amqp.Serialization.AmqpContractAttribute"/> and <see cref="T:Amqp.Serialization.AmqpMemberAttribute"/>.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.#ctor(Amqp.Serialization.IContractResolver)">
            <summary>
            Initializes a new instance of the AmqpSerializer class with a custom contract
            resolver. See documentation for the order followed by the serializer to resolve
            a type.
            </summary>
            <param name="contractResolver">A contract resolver to create a serialization
            contract for a given type.</param>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.Serialize(Amqp.ByteBuffer,System.Object)">
            <summary>
            Serializes an instance of an AMQP type into a buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="graph">The serializable AMQP object.</param>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.Deserialize``1(Amqp.ByteBuffer)">
            <summary>
            Deserializes an instance of an AMQP type from a buffer.
            </summary>
            <typeparam name="T">The serializable type.</typeparam>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.Deserialize``2(Amqp.ByteBuffer)">
            <summary>
            Deserializes an instance of an AMQP type from a buffer.
            </summary>
            <typeparam name="T">The serializable type.</typeparam>
            <typeparam name="TAs">The return type of the deserialized object.</typeparam>
            <param name="buffer">The buffer to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.WriteObject(Amqp.ByteBuffer,System.Object)">
            <summary>
            Writes an serializable object into a buffer.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="graph">The serializable object.</param>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.ReadObject``1(Amqp.ByteBuffer)">
            <summary>
            Reads an serializable object from a buffer.
            </summary>
            <typeparam name="T">The type of the serializable object.</typeparam>
            <param name="buffer">The buffer to read.</param>
            <returns></returns>
        </member>
        <member name="M:Amqp.Serialization.AmqpSerializer.ReadObject``2(Amqp.ByteBuffer)">
            <summary>
            Reads an serializable object from a buffer.
            </summary>
            <typeparam name="T">The type of the serializable object.</typeparam>
            <typeparam name="TAs">The return type of the deserialized object.</typeparam>
            <param name="buffer">The buffer to read.</param>
            <returns></returns>
        </member>
        <member name="T:Amqp.Serialization.AmqpMemberAttribute">
            <summary>
            Specifies that the member is part of an AMQP serializable type.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpMemberAttribute.Name">
            <summary>
            Gets or sets the field name of the member.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.AmqpMemberAttribute.Order">
            <summary>
            Gets or sets the order of the member in the list when encoding type is
            set to list.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.AmqpProvidesAttribute">
            <summary>
            Specifies that the current type can be set to the provided type.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.AmqpProvidesAttribute.#ctor(System.Type)">
            <summary>
            Initializes the attribute object.
            </summary>
            <param name="type">The provided type.</param>
        </member>
        <member name="P:Amqp.Serialization.AmqpProvidesAttribute.Type">
            <summary>
            Gets the provided type.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.IAmqpSerializable">
            <summary>
            Specifies that a type is serializable by the AMQP serializer.
            </summary>
        </member>
        <member name="P:Amqp.Serialization.IAmqpSerializable.EncodeSize">
            <summary>
            Gets the encode size in bytes of an instance.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.IAmqpSerializable.Encode(Amqp.ByteBuffer)">
            <summary>
            Encodes the serializable object into a buffer.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Amqp.Serialization.IAmqpSerializable.Decode(Amqp.ByteBuffer)">
            <summary>
            Decodes and initializes the serializable object from a buffer.
            </summary>
            <param name="buffer">The buffer to read.</param>
        </member>
        <member name="T:Amqp.Serialization.EncodingType">
            <summary>
            Defines the encoding type of an AMQP serializable type.
            </summary>
        </member>
        <member name="F:Amqp.Serialization.EncodingType.List">
            <summary>
            The type is encoded as an AMQP described list.
            </summary>
        </member>
        <member name="F:Amqp.Serialization.EncodingType.Map">
            <summary>
            The type is encoded as an AMQP described map.
            </summary>
        </member>
        <member name="F:Amqp.Serialization.EncodingType.SimpleMap">
            <summary>
            The type is encoded as an AMQP map with string keys.
            </summary>
        </member>
        <member name="F:Amqp.Serialization.EncodingType.SimpleList">
            <summary>
            The type is encoded as an AMQP list with no descriptor.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.IContractResolver">
            <summary>
            Resolves a given type to the AMQP contract for serialization.
            </summary>
        </member>
        <member name="M:Amqp.Serialization.IContractResolver.Resolve(System.Type)">
            <summary>
            Resolves a type to the AMQP contract.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>An <see cref="T:Amqp.Serialization.AmqpContract"/> that controls the serialization of the given type.</returns>
        </member>
        <member name="T:Amqp.Serialization.OnDeserializedAttribute">
            <summary>
            When applied to a method, specifies that the method is called after
            deserialization of an object.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.OnDeserializingAttribute">
            <summary>
            When applied to a method, specifies that the method is called during
            deserialization of an object.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.OnSerializedAttribute">
            <summary>
            When applied to a method, specifies that the method is called after serialization
            of an object.
            </summary>
        </member>
        <member name="T:Amqp.Serialization.OnSerializingAttribute">
            <summary>
            When applied to a method, specifies that the method is called during serialization
            of an object.
            </summary>
        </member>
        <member name="T:Amqp.Extensions">
            <summary>
            Provides extension methods for message serialization.
            </summary>
        </member>
        <member name="M:Amqp.Extensions.GetBody``1(Amqp.Message)">
            <summary>
            Gets an object of type T from the message body.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="message">The message from which the body is deserialized.</param>
            <returns>An object of type T.</returns>
        </member>
        <member name="M:Amqp.Extensions.GetBody``1(Amqp.Message,Amqp.Serialization.AmqpSerializer)">
            <summary>
            Gets an object of type T from the message body using the
            provided serializer.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="message">The message from which the body is deserialized.</param>
            <param name="serializer">The serializer to deserialize the object.</param>
            <returns>An object of type T.</returns>
        </member>
        <member name="T:Amqp.SessionState">
            <summary>
            The state of a session.
            </summary>
        </member>
        <member name="F:Amqp.SessionState.Start">
            <summary>
            The session is started.
            </summary>
        </member>
        <member name="F:Amqp.SessionState.BeginSent">
            <summary>
            Begin frame was sent.
            </summary>
        </member>
        <member name="F:Amqp.SessionState.BeginReceived">
            <summary>
            Begin frame was received.
            </summary>
        </member>
        <member name="F:Amqp.SessionState.Opened">
            <summary>
            The session is opened. 
            </summary>
        </member>
        <member name="F:Amqp.SessionState.EndReceived">
            <summary>
            End frame received.
            </summary>
        </member>
        <member name="F:Amqp.SessionState.EndSent">
            <summary>
            End frame was sent.
            </summary> 
        </member>
        <member name="F:Amqp.SessionState.EndPipe">
            <summary>
            The session is closing.
            </summary>
        </member>
        <member name="F:Amqp.SessionState.End">
            <summary>
            The session is closed.
            </summary>
        </member>
        <member name="T:Amqp.TraceLevel">
            <summary>
            Defines the traces levels. Except Frame, levels are forward inclusive.
            For example, Information level includes the Error and Warning levels.
            </summary>
        </member>
        <member name="F:Amqp.TraceLevel.Error">
            <summary>
            Specifies that error events should be traced.
            </summary>
        </member>
        <member name="F:Amqp.TraceLevel.Warning">
            <summary>
            Specifies that warning events should be traced.
            </summary>
        </member>
        <member name="F:Amqp.TraceLevel.Information">
            <summary>
            Specifies that informational events should be traced.
            </summary>
        </member>
        <member name="F:Amqp.TraceLevel.Verbose">
            <summary>
            Specifies that verbose events should be traced.
            </summary>
        </member>
        <member name="F:Amqp.TraceLevel.Frame">
            <summary>
            Specifies that AMQP frames should be traced.
            </summary>
        </member>
        <member name="F:Amqp.TraceLevel.Output">
            <summary>
            Specifies that application output should be traced.
            </summary>
        </member>
        <member name="T:Amqp.WriteTrace">
            <summary>
            The callback to invoke to write traces.
            </summary>
            <param name="level">The trace level at which the trace event is raised.</param>
            <param name="format">The format string for the arguments.</param>
            <param name="args">The arguments attached to the trace event.</param>
        </member>
        <member name="T:Amqp.Trace">
            <summary>
            The Trace class for writing traces.
            </summary>
        </member>
        <member name="F:Amqp.Trace.TraceLevel">
            <summary>
            Gets or sets the trace level.
            </summary>
        </member>
        <member name="F:Amqp.Trace.TraceListener">
            <summary>
            Gets or sets the trace callback.
            </summary>
        </member>
        <member name="M:Amqp.Trace.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug trace.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The argument list.</param>
        </member>
        <member name="M:Amqp.Trace.WriteLine(Amqp.TraceLevel,System.String)">
            <summary>
            Writes a trace if the specified level is enabled.
            </summary>
            <param name="level">The trace level.</param>
            <param name="format">The content to trace.</param>
        </member>
        <member name="M:Amqp.Trace.WriteLine(Amqp.TraceLevel,System.String,System.Object)">
            <summary>
            Writes a trace if the specified level is enabled.
            </summary>
            <param name="level">The trace level.</param>
            <param name="format">The format string.</param>
            <param name="arg1">The first argument.</param>
        </member>
        <member name="M:Amqp.Trace.WriteLine(Amqp.TraceLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes a trace if the specified level is enabled.
            </summary>
            <param name="level">The trace level.</param>
            <param name="format">The format string.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:Amqp.Trace.WriteLine(Amqp.TraceLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes a trace if the specified level is enabled.
            </summary>
            <param name="level">The trace level.</param>
            <param name="format">The format string.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="T:Amqp.ErrorCode">
            <summary>
            Defines the conditions of AMQP errors.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.InternalError">
            <summary>
            An internal error occurred. Operator intervention may be required to resume
            normal operation.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.NotFound">
            <summary>
            A peer attempted to work with a remote entity that does not exist.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.UnauthorizedAccess">
            <summary>
            A peer attempted to work with a remote entity to which it has no access
            due to security settings.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.DecodeError">
            <summary>
            Data could not be decoded.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.ResourceLimitExceeded">
            <summary>
            Data could not be decoded.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.NotAllowed">
            <summary>
            The peer tried to use a frame in a manner that is inconsistent with
            the semantics defined in the specification.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.InvalidField">
            <summary>
            An invalid field was passed in a frame body, and the operation could not proceed.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.NotImplemented">
            <summary>
            The peer tried to use functionality that is not implemented in its partner.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.ResourceLocked">
            <summary>
            The client attempted to work with a server entity to which it has no access
            because another client is working with it.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.PreconditionFailed">
            <summary>
            The client made a request that was not allowed because some precondition failed.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.ResourceDeleted">
            <summary>
            A server entity the client is working with has been deleted.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.IllegalState">
            <summary>
            The peer sent a frame that is not permitted in the current state of the Session.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.FrameSizeTooSmall">
            <summary>
            The peer cannot send a frame because the smallest encoding of the performative
            with the currently valid values would be too large to fit within a frame of
            the agreed maximum frame size. 
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.ConnectionForced">
            <summary>
            An operator intervened to close the Connection for some reason.
            The client may retry at some later date.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.FramingError">
            <summary>
            A valid frame header cannot be formed from the incoming byte stream.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.ConnectionRedirect">
            <summary>
            The container is no longer available on the current connection. 
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.WindowViolation">
            <summary>
            The peer violated incoming window for the session.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.ErrantLink">
            <summary>
            Input was received for a link that was detached with an error.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.HandleInUse">
            <summary>
            An attach was received using a handle that is already in use for an attached Link.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.UnattachedHandle">
            <summary>
            A frame (other than attach) was received referencing a handle which is not currently
            in use of an attached Link.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.DetachForced">
            <summary>
            An operator intervened to detach for some reason.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.TransferLimitExceeded">
            <summary>
            The peer sent more Message transfers than currently allowed on the link.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.MessageSizeExceeded">
            <summary>
            The peer sent a larger message than is supported on the link.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.LinkRedirect">
            <summary>
            The address provided cannot be resolved to a terminus at the current container.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.Stolen">
            <summary>
            The link has been attached elsewhere, causing the existing attachment
            to be forcibly closed.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.TransactionUnknownId">
            <summary>
            The specified txn-id does not exist.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.TransactionRollback">
            <summary>
            The transaction was rolled back for an unspecified reason.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.TransactionTimeout">
            <summary>
            The work represented by this transaction took too long.
            </summary>
        </member>
        <member name="F:Amqp.ErrorCode.MessageReleased">
            <summary>
            The message has been released by the peer.
            </summary>
        </member>
    </members>
</doc>
